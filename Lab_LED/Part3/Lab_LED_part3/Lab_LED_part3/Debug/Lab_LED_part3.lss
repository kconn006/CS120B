
Lab_LED_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000029a  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800106  00800106  00000334  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a91  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000900  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042e  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054d  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000147  00000000  00000000  000021bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d2 d0       	rcall	.+420    	; 0x268 <main>
  c4:	e8 c0       	rjmp	.+464    	; 0x296 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	
	PORTA = column_val; // PORTA displays column pattern
	PORTB = column_sel; // PORTB selects column to display pattern

	return state;
};
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
  ec:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
  f0:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
  f4:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
  f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
  fc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 100:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 104:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 126:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 13c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 140:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 144:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <TimerFlag>
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 15a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 15e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 162:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 166:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 16a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 172:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:
 188:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 18c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 194:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
 198:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <_avr_timer_cntcurr>
 19c:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <MoveColumn_Tick>:
		    B0  B1  B2  B3  B4  B5  B6  B7 */
	//Start with ball in Left Top corner
		// === Local Variables ===
		static uc turn_on = 0xFF; // sets the pattern displayed on columns
		static uc column_num = 0x7F; // grounds column to display pattern
		uc right_button= ~PINC & 0x01; // down = C1		
 1aa:	86 b1       	in	r24, 0x06	; 6
 1ac:	28 2f       	mov	r18, r24
 1ae:	21 70       	andi	r18, 0x01	; 1
		uc left_button= ~PINC & 0x02; // up = C0
 1b0:	86 b1       	in	r24, 0x06	; 6
 1b2:	80 95       	com	r24
 1b4:	82 70       	andi	r24, 0x02	; 2
		

		//Remember Columns have to be 0 first in order to turn on
		//Row value (turn_on) has to 1 to turn on a grounded (0) column
		
		switch (mb_state)
 1b6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <mb_state>
 1ba:	92 30       	cpi	r25, 0x02	; 2
 1bc:	41 f1       	breq	.+80     	; 0x20e <MoveColumn_Tick+0x64>
 1be:	28 f4       	brcc	.+10     	; 0x1ca <MoveColumn_Tick+0x20>
 1c0:	99 23       	and	r25, r25
 1c2:	41 f0       	breq	.+16     	; 0x1d4 <MoveColumn_Tick+0x2a>
 1c4:	91 30       	cpi	r25, 0x01	; 1
 1c6:	c1 f0       	breq	.+48     	; 0x1f8 <MoveColumn_Tick+0x4e>
 1c8:	27 c0       	rjmp	.+78     	; 0x218 <MoveColumn_Tick+0x6e>
 1ca:	93 30       	cpi	r25, 0x03	; 3
 1cc:	79 f0       	breq	.+30     	; 0x1ec <MoveColumn_Tick+0x42>
 1ce:	94 30       	cpi	r25, 0x04	; 4
 1d0:	c9 f0       	breq	.+50     	; 0x204 <MoveColumn_Tick+0x5a>
 1d2:	22 c0       	rjmp	.+68     	; 0x218 <MoveColumn_Tick+0x6e>
		{
			//State Transitions 
			case MB_START:
				if (left_button)
 1d4:	88 23       	and	r24, r24
 1d6:	21 f0       	breq	.+8      	; 0x1e0 <MoveColumn_Tick+0x36>
				{
					mb_state = MB_PRESS_LEFT;
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mb_state>
					break;
 1de:	3e c0       	rjmp	.+124    	; 0x25c <MoveColumn_Tick+0xb2>
				}
				if (right_button)
 1e0:	21 11       	cpse	r18, r1
 1e2:	3c c0       	rjmp	.+120    	; 0x25c <MoveColumn_Tick+0xb2>
				{
					mb_state = MB_PRESS_RIGHT;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mb_state>
					break;
 1ea:	38 c0       	rjmp	.+112    	; 0x25c <MoveColumn_Tick+0xb2>
					mb_state = MB_START;
					break;
				}
			break;
			case MB_PRESS_LEFT:
				if (left_button)
 1ec:	81 11       	cpse	r24, r1
 1ee:	36 c0       	rjmp	.+108    	; 0x25c <MoveColumn_Tick+0xb2>
				{
					mb_state = MB_PRESS_LEFT;
					break;
				}
				else{
					mb_state = MB_LEFT;
 1f0:	84 e0       	ldi	r24, 0x04	; 4
 1f2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mb_state>
					break;
 1f6:	14 c0       	rjmp	.+40     	; 0x220 <MoveColumn_Tick+0x76>
				}
			case MB_PRESS_RIGHT:
				if (right_button)
 1f8:	22 23       	and	r18, r18
 1fa:	81 f1       	breq	.+96     	; 0x25c <MoveColumn_Tick+0xb2>
				{
					mb_state = MB_PRESS_RIGHT;
					break;
				}
				else{
					mb_state = MB_RIGHT;
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mb_state>
					break;
 202:	1c c0       	rjmp	.+56     	; 0x23c <MoveColumn_Tick+0x92>
				}
				break;
			case MB_LEFT:
				if (!left_button)
 204:	81 11       	cpse	r24, r1
 206:	0c c0       	rjmp	.+24     	; 0x220 <MoveColumn_Tick+0x76>
				{
					mb_state = MB_START;
 208:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <mb_state>
 20c:	27 c0       	rjmp	.+78     	; 0x25c <MoveColumn_Tick+0xb2>
				}
				break;
			case MB_RIGHT:
				if (!right_button)
 20e:	22 23       	and	r18, r18
 210:	a9 f0       	breq	.+42     	; 0x23c <MoveColumn_Tick+0x92>
				{
					mb_state = MB_START;
 212:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <mb_state>
 216:	22 c0       	rjmp	.+68     	; 0x25c <MoveColumn_Tick+0xb2>
				break;
			default:
				break;
		}

		switch (mb_state)
 218:	92 30       	cpi	r25, 0x02	; 2
 21a:	81 f0       	breq	.+32     	; 0x23c <MoveColumn_Tick+0x92>
 21c:	94 30       	cpi	r25, 0x04	; 4
 21e:	f1 f4       	brne	.+60     	; 0x25c <MoveColumn_Tick+0xb2>
			case MB_PRESS_LEFT:
			break;
			case MB_PRESS_RIGHT:
			break;
			case MB_LEFT:
				if (current_col!=left_wall)
 220:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 224:	88 23       	and	r24, r24
 226:	d1 f0       	breq	.+52     	; 0x25c <MoveColumn_Tick+0xb2>
				{
					change_col = column_num; //Get column thats on
 228:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
					change_col = ~change_col; //Invert it (want the position 0 is at)
					change_col = (change_col << 1);//Shift it (Move the 0 over)
 22c:	99 0f       	add	r25, r25
					change_col = ~change_col;//Invert it back (Put zero in new place)
					column_num = change_col;//Now new column lights up
 22e:	91 60       	ori	r25, 0x01	; 1
 230:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
					current_col -=1;
 234:	81 50       	subi	r24, 0x01	; 1
 236:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 23a:	10 c0       	rjmp	.+32     	; 0x25c <MoveColumn_Tick+0xb2>
				}
			break;
			case MB_RIGHT:
			if (current_col!=right_wall)
 23c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 240:	87 30       	cpi	r24, 0x07	; 7
 242:	61 f0       	breq	.+24     	; 0x25c <MoveColumn_Tick+0xb2>
			{
				change_col = column_num; //Get column thats on
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
				change_col = ~change_col; //Invert it (want the position 0 is at)
				change_col = (change_col >> 1);//Shift it (Move the 0 over)
 248:	86 95       	lsr	r24
				change_col = ~change_col;//Invert it back (Put zero in new place)
 24a:	80 58       	subi	r24, 0x80	; 128
				PORTD =change_col;
 24c:	8b b9       	out	0x0b, r24	; 11
				column_num = change_col;//Now new column lights up
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				current_col +=1;
 252:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			break;	
			default:
			break;	
		}
		
		PORTA = turn_on;
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	82 b9       	out	0x02, r24	; 2
		PORTB = column_num;
 260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 264:	85 b9       	out	0x05, r24	; 5
 266:	08 95       	ret

00000268 <main>:
		 
}
int main(void)
{
	/* Replace with your application code */
	DDRA = 0xFF; //set port A to output
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00; //init port A to 0's
 26c:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; //set port B to output
 26e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //init port B to 0's
 270:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; //set port C to intput
 272:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF; //init port C to 1's
 274:	88 b9       	out	0x08, r24	; 8
	
	
	const unsigned long timerPeriod =100;

	TimerSet(timerPeriod);
 276:	64 e6       	ldi	r22, 0x64	; 100
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	84 df       	rcall	.-248    	; 0x188 <TimerSet>
	TimerOn();	
 280:	23 df       	rcall	.-442    	; 0xc8 <TimerOn>
 282:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <mb_state>
	while (1)
	{

		
		//SM1_Tick(sm1_display);
		MoveColumn_Tick();
 286:	91 df       	rcall	.-222    	; 0x1aa <MoveColumn_Tick>
 288:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TimerFlag>
		while(!TimerFlag); //wait 1 sec
 28c:	88 23       	and	r24, r24
 28e:	e1 f3       	breq	.-8      	; 0x288 <main+0x20>
 290:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TimerFlag>
		TimerFlag = 0;
 294:	f8 cf       	rjmp	.-16     	; 0x286 <main+0x1e>

00000296 <_exit>:
	}
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
