
LED_Mat_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000350  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800106  00800106  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000941  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083f  00000000  00000000  00000ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a1  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047f  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	8b c0       	rjmp	.+278    	; 0x14c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1d d1       	rcall	.+570    	; 0x2fe <main>
  c4:	43 c1       	rjmp	.+646    	; 0x34c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	SREG |= 0x80;
}

void TimerOff() {
	TCCR1B = 0x00;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e8       	ldi	r24, 0x81	; 129
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2b e0       	ldi	r18, 0x0B	; 11
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2d e7       	ldi	r18, 0x7D	; 125
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	31 83       	std	Z+1, r19	; 0x01
  e6:	20 83       	st	Z, r18
  e8:	8f e6       	ldi	r24, 0x6F	; 111
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	10 82       	st	Z, r1
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 104:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 108:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 10c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 110:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 114:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 118:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 11c:	8f e5       	ldi	r24, 0x5F	; 95
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2f e5       	ldi	r18, 0x5F	; 95
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	20 68       	ori	r18, 0x80	; 128
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	00 00       	nop
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <TimerISR>:

void TimerISR() {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 144:	00 00       	nop
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 15c:	0f 92       	push	r0
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	_avr_timer_cntcurr--;
 17e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 182:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 186:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 18a:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	a1 09       	sbc	r26, r1
 192:	b1 09       	sbc	r27, r1
 194:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 198:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 19c:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1a0:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	
	if(_avr_timer_cntcurr == 0) {
 1a4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 1a8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 1ac:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 1b0:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 1b4:	89 2b       	or	r24, r25
 1b6:	8a 2b       	or	r24, r26
 1b8:	8b 2b       	or	r24, r27
 1ba:	89 f4       	brne	.+34     	; 0x1de <__vector_13+0x92>
		TimerISR();
 1bc:	bc df       	rcall	.-136    	; 0x136 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ce:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 1d2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 1d6:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1da:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 1de:	00 00       	nop
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 202:	0f 90       	pop	r0
 204:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <TimerSet>:

void TimerSet(unsigned long M) {
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	00 d0       	rcall	.+0      	; 0x214 <TimerSet+0x6>
 214:	00 d0       	rcall	.+0      	; 0x216 <TimerSet+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	69 83       	std	Y+1, r22	; 0x01
 21c:	7a 83       	std	Y+2, r23	; 0x02
 21e:	8b 83       	std	Y+3, r24	; 0x03
 220:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	ab 81       	ldd	r26, Y+3	; 0x03
 228:	bc 81       	ldd	r27, Y+4	; 0x04
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 22e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 232:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 236:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 242:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 246:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 24a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 24e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 252:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 256:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
}
 25a:	00 00       	nop
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <SM1_Tick>:

// ====================
// SM1: DEMO LED matrix
// ====================
enum SM1_States {sm1_display};
int SM1_Tick(int state) {
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 d0       	rcall	.+0      	; 0x270 <SM1_Tick+0x6>
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	89 83       	std	Y+1, r24	; 0x01
	// === Local Variables ===
	static unsigned char column_val = 0x01; // sets the pattern displayed on columns
	static unsigned char column_sel = 0x7F; // grounds column to display pattern
	
	// === Transitions ===
	switch (state) {
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	9a 81       	ldd	r25, Y+2	; 0x02
 27c:	89 2b       	or	r24, r25
 27e:	19 f0       	breq	.+6      	; 0x286 <SM1_Tick+0x1c>
		case sm1_display:    break;
		default:   	        state = sm1_display;
 280:	1a 82       	std	Y+2, r1	; 0x02
 282:	19 82       	std	Y+1, r1	; 0x01
		break;
 284:	01 c0       	rjmp	.+2      	; 0x288 <SM1_Tick+0x1e>
	static unsigned char column_val = 0x01; // sets the pattern displayed on columns
	static unsigned char column_sel = 0x7F; // grounds column to display pattern
	
	// === Transitions ===
	switch (state) {
		case sm1_display:    break;
 286:	00 00       	nop
		default:   	        state = sm1_display;
		break;
	}
	
	// === Actions ===
	switch (state) {
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	89 2b       	or	r24, r25
 28e:	09 f0       	breq	.+2      	; 0x292 <SM1_Tick+0x28>
		// else Shift displayed column one to the right
		else {
			column_sel = (column_sel >> 1) | 0x80;
		}
		break;
		default:   	        break;
 290:	23 c0       	rjmp	.+70     	; 0x2d8 <SM1_Tick+0x6e>
	}
	
	// === Actions ===
	switch (state) {
		case sm1_display:   // If illuminated LED in bottom right corner
		if (column_sel == 0xFE && column_val == 0x80) {
 292:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_sel.1624>
 296:	8e 3f       	cpi	r24, 0xFE	; 254
 298:	59 f4       	brne	.+22     	; 0x2b0 <SM1_Tick+0x46>
 29a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_val.1623>
 29e:	80 38       	cpi	r24, 0x80	; 128
 2a0:	39 f4       	brne	.+14     	; 0x2b0 <SM1_Tick+0x46>
			column_sel = 0x7F; // display far left column
 2a2:	8f e7       	ldi	r24, 0x7F	; 127
 2a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <column_sel.1624>
			column_val = 0x01; // pattern illuminates top row
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <column_val.1623>
		}
		// else Shift displayed column one to the right
		else {
			column_sel = (column_sel >> 1) | 0x80;
		}
		break;
 2ae:	13 c0       	rjmp	.+38     	; 0x2d6 <SM1_Tick+0x6c>
		if (column_sel == 0xFE && column_val == 0x80) {
			column_sel = 0x7F; // display far left column
			column_val = 0x01; // pattern illuminates top row
		}
		// else if far right column was last to display (grounded)
		else if (column_sel == 0xFE) {
 2b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_sel.1624>
 2b4:	8e 3f       	cpi	r24, 0xFE	; 254
 2b6:	49 f4       	brne	.+18     	; 0x2ca <SM1_Tick+0x60>
			column_sel = 0x7F; // resets display column to far left column
 2b8:	8f e7       	ldi	r24, 0x7F	; 127
 2ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <column_sel.1624>
			column_val = column_val << 1; // shift down illuminated LED one row
 2be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <column_val.1623>
 2c2:	88 0f       	add	r24, r24
 2c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <column_val.1623>
		}
		// else Shift displayed column one to the right
		else {
			column_sel = (column_sel >> 1) | 0x80;
		}
		break;
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <SM1_Tick+0x6c>
			column_sel = 0x7F; // resets display column to far left column
			column_val = column_val << 1; // shift down illuminated LED one row
		}
		// else Shift displayed column one to the right
		else {
			column_sel = (column_sel >> 1) | 0x80;
 2ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <column_sel.1624>
 2ce:	86 95       	lsr	r24
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <column_sel.1624>
		}
		break;
 2d6:	00 00       	nop
		default:   	        break;
	}
	
	PORTA = column_val; // PORTA displays column pattern
 2d8:	82 e2       	ldi	r24, 0x22	; 34
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <column_val.1623>
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
	PORTB = column_sel; // PORTB selects column to display pattern
 2e4:	85 e2       	ldi	r24, 0x25	; 37
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <column_sel.1624>
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18

	return state;
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	9a 81       	ldd	r25, Y+2	; 0x02
};
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <main>:

int main(void)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	DDRA = 0xFF; //set port A to output
 306:	81 e2       	ldi	r24, 0x21	; 33
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
	PORTA = 0x00; //init port A to 0's
 310:	82 e2       	ldi	r24, 0x22	; 34
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	fc 01       	movw	r30, r24
 316:	10 82       	st	Z, r1
	DDRB = 0xFF; //set port B to output
 318:	84 e2       	ldi	r24, 0x24	; 36
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	2f ef       	ldi	r18, 0xFF	; 255
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
	PORTB = 0x00; //init port B to 0's
 322:	85 e2       	ldi	r24, 0x25	; 37
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	fc 01       	movw	r30, r24
 328:	10 82       	st	Z, r1
	TimerSet(500);
 32a:	64 ef       	ldi	r22, 0xF4	; 244
 32c:	71 e0       	ldi	r23, 0x01	; 1
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	6d df       	rcall	.-294    	; 0x20e <TimerSet>
	TimerOn();
 334:	c9 de       	rcall	.-622    	; 0xc8 <TimerOn>
 336:	80 e0       	ldi	r24, 0x00	; 0
	while (1)
	{
		//tmpB = ~tmpB;
		//PORTB = tmpB;
		
		SM1_Tick(sm1_display);
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	97 df       	rcall	.-210    	; 0x26a <SM1_Tick>
 33c:	00 00       	nop
		
		while(!TimerFlag); //wait 1 sec
 33e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 342:	88 23       	and	r24, r24
 344:	e1 f3       	breq	.-8      	; 0x33e <main+0x40>
 346:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		TimerFlag = 0;
 34a:	f5 cf       	rjmp	.-22     	; 0x336 <main+0x38>

0000034c <_exit>:
	}
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
