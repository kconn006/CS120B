
CS120B_lab3_part2_kc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b1  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040a  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000459  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	ff d0       	rcall	.+510    	; 0x2a8 <main>
  aa:	23 c1       	rjmp	.+582    	; 0x2f2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
enum States{INIT, output7, button_pressed, button_released, reset, decrement, increment} state;
unsigned char button0 = 0x00;
unsigned char button1 = 0x00;
unsigned char tempC = 0x00;

void Tick() {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	
	button0 = PINA & 0x01; //PA0
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	80 81       	ld	r24, Z
  be:	81 70       	andi	r24, 0x01	; 1
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	button1 = PINA & 0x02; //PA1
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	82 70       	andi	r24, 0x02	; 2
  ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <button1>
	
	switch(state) 
  d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
  d6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <state+0x1>
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	91 05       	cpc	r25, r1
  de:	d9 f1       	breq	.+118    	; 0x156 <Tick+0xa8>
  e0:	85 30       	cpi	r24, 0x05	; 5
  e2:	91 05       	cpc	r25, r1
  e4:	28 f4       	brcc	.+10     	; 0xf0 <Tick+0x42>
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	51 f0       	breq	.+20     	; 0xfe <Tick+0x50>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	79 f0       	breq	.+30     	; 0x10c <Tick+0x5e>
				state = increment;
			}
			state = INIT;
			break;
		default:
			break;
  ee:	a3 c0       	rjmp	.+326    	; 0x236 <Tick+0x188>
void Tick() {
	
	button0 = PINA & 0x01; //PA0
	button1 = PINA & 0x02; //PA1
	
	switch(state) 
  f0:	85 30       	cpi	r24, 0x05	; 5
  f2:	91 05       	cpc	r25, r1
  f4:	09 f4       	brne	.+2      	; 0xf8 <Tick+0x4a>
  f6:	6a c0       	rjmp	.+212    	; 0x1cc <Tick+0x11e>
  f8:	06 97       	sbiw	r24, 0x06	; 6
  fa:	91 f1       	breq	.+100    	; 0x160 <Tick+0xb2>
				state = increment;
			}
			state = INIT;
			break;
		default:
			break;
  fc:	9c c0       	rjmp	.+312    	; 0x236 <Tick+0x188>
	button1 = PINA & 0x02; //PA1
	
	switch(state) 
	{ //transitions
		case INIT: //automatically go to output7
			state = output7;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 106:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 10a:	95 c0       	rjmp	.+298    	; 0x236 <Tick+0x188>
		case output7:
			if (button0 && button1) {
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	88 23       	and	r24, r24
 112:	59 f0       	breq	.+22     	; 0x12a <Tick+0x7c>
 114:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 118:	88 23       	and	r24, r24
 11a:	39 f0       	breq	.+14     	; 0x12a <Tick+0x7c>
				state = reset;
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 124:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 128:	86 c0       	rjmp	.+268    	; 0x236 <Tick+0x188>
			}
			if (button0)
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12e:	88 23       	and	r24, r24
 130:	39 f0       	breq	.+14     	; 0x140 <Tick+0x92>
			{
				state = increment;
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 13a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 13e:	7b c0       	rjmp	.+246    	; 0x236 <Tick+0x188>
			}
			if (button1)
 140:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 144:	88 23       	and	r24, r24
 146:	39 f0       	breq	.+14     	; 0x156 <Tick+0xa8>
			{
				state = decrement;
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 150:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 154:	70 c0       	rjmp	.+224    	; 0x236 <Tick+0x188>
			}
		case reset:
			state = INIT;
 156:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state+0x1>
 15a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
			break;
 15e:	6b c0       	rjmp	.+214    	; 0x236 <Tick+0x188>
		case increment:
			if (button0 && button1) 
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 164:	88 23       	and	r24, r24
 166:	59 f0       	breq	.+22     	; 0x17e <Tick+0xd0>
 168:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 16c:	88 23       	and	r24, r24
 16e:	39 f0       	breq	.+14     	; 0x17e <Tick+0xd0>
				{
					state = reset;
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 178:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
					break;
 17c:	5c c0       	rjmp	.+184    	; 0x236 <Tick+0x188>
				}
			if (button0 && !button1)
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 182:	88 23       	and	r24, r24
 184:	79 f0       	breq	.+30     	; 0x1a4 <Tick+0xf6>
 186:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 18a:	88 23       	and	r24, r24
 18c:	59 f4       	brne	.+22     	; 0x1a4 <Tick+0xf6>
			{
				if (tempC < 9)
 18e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 192:	89 30       	cpi	r24, 0x09	; 9
 194:	38 f4       	brcc	.+14     	; 0x1a4 <Tick+0xf6>
				{
					state = increment;
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 19e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
					break;
 1a2:	49 c0       	rjmp	.+146    	; 0x236 <Tick+0x188>
				}	
			}
			if (!button0 && button1)
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a8:	88 23       	and	r24, r24
 1aa:	59 f4       	brne	.+22     	; 0x1c2 <Tick+0x114>
 1ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 1b0:	88 23       	and	r24, r24
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <Tick+0x114>
			{
				state = decrement;
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 1bc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 1c0:	3a c0       	rjmp	.+116    	; 0x236 <Tick+0x188>
			}
			state = INIT;
 1c2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state+0x1>
 1c6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
			break;
 1ca:	35 c0       	rjmp	.+106    	; 0x236 <Tick+0x188>
		case decrement:
			if (button0 && button1) 
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d0:	88 23       	and	r24, r24
 1d2:	59 f0       	breq	.+22     	; 0x1ea <Tick+0x13c>
 1d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 1d8:	88 23       	and	r24, r24
 1da:	39 f0       	breq	.+14     	; 0x1ea <Tick+0x13c>
				{
					state = reset;
 1dc:	84 e0       	ldi	r24, 0x04	; 4
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 1e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
					break;
 1e8:	26 c0       	rjmp	.+76     	; 0x236 <Tick+0x188>
				}
			if (button1 && !button0)
 1ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 1ee:	88 23       	and	r24, r24
 1f0:	79 f0       	breq	.+30     	; 0x210 <Tick+0x162>
 1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f6:	88 23       	and	r24, r24
 1f8:	59 f4       	brne	.+22     	; 0x210 <Tick+0x162>
				{
					if (tempC > 0)
 1fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 1fe:	88 23       	and	r24, r24
 200:	39 f0       	breq	.+14     	; 0x210 <Tick+0x162>
					{
						state = decrement;
 202:	85 e0       	ldi	r24, 0x05	; 5
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 20a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
						break;
 20e:	13 c0       	rjmp	.+38     	; 0x236 <Tick+0x188>
					}
					
				}
			if (!button1 && button0)
 210:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 214:	88 23       	and	r24, r24
 216:	51 f4       	brne	.+20     	; 0x22c <Tick+0x17e>
 218:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 21c:	88 23       	and	r24, r24
 21e:	31 f0       	breq	.+12     	; 0x22c <Tick+0x17e>
			{
				state = increment;
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 228:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			}
			state = INIT;
 22c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state+0x1>
 230:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
			break;
 234:	00 00       	nop
		default:
			break;
	}

	switch(state)
 236:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
 23a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <state+0x1>
 23e:	84 30       	cpi	r24, 0x04	; 4
 240:	91 05       	cpc	r25, r1
 242:	91 f0       	breq	.+36     	; 0x268 <Tick+0x1ba>
 244:	85 30       	cpi	r24, 0x05	; 5
 246:	91 05       	cpc	r25, r1
 248:	28 f4       	brcc	.+10     	; 0x254 <Tick+0x1a6>
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	21 f1       	breq	.+72     	; 0x296 <Tick+0x1e8>
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	39 f0       	breq	.+14     	; 0x260 <Tick+0x1b2>
					tempC = tempC-1;
				}
			break;
			
		default:
			break;
 252:	26 c0       	rjmp	.+76     	; 0x2a0 <Tick+0x1f2>
			break;
		default:
			break;
	}

	switch(state)
 254:	85 30       	cpi	r24, 0x05	; 5
 256:	91 05       	cpc	r25, r1
 258:	a1 f0       	breq	.+40     	; 0x282 <Tick+0x1d4>
 25a:	06 97       	sbiw	r24, 0x06	; 6
 25c:	41 f0       	breq	.+16     	; 0x26e <Tick+0x1c0>
					tempC = tempC-1;
				}
			break;
			
		default:
			break;
 25e:	20 c0       	rjmp	.+64     	; 0x2a0 <Tick+0x1f2>
	switch(state)
	{//State actions 
		case INIT:
			break;
		case output7:
			tempC = 0x07;
 260:	87 e0       	ldi	r24, 0x07	; 7
 262:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempC>
			break;
 266:	1c c0       	rjmp	.+56     	; 0x2a0 <Tick+0x1f2>
		case reset:
			tempC = 0x00;
 268:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tempC>
			break;
 26c:	19 c0       	rjmp	.+50     	; 0x2a0 <Tick+0x1f2>
		case increment:
			if (button0)
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 272:	88 23       	and	r24, r24
 274:	91 f0       	breq	.+36     	; 0x29a <Tick+0x1ec>
				{
					tempC = tempC+1;
 276:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempC>
				}
			break;
 280:	0c c0       	rjmp	.+24     	; 0x29a <Tick+0x1ec>
		case decrement:
			if (button1)
 282:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 286:	88 23       	and	r24, r24
 288:	51 f0       	breq	.+20     	; 0x29e <Tick+0x1f0>
				{
					tempC = tempC-1;
 28a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempC>
				}
			break;
 294:	04 c0       	rjmp	.+8      	; 0x29e <Tick+0x1f0>
	}

	switch(state)
	{//State actions 
		case INIT:
			break;
 296:	00 00       	nop
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <Tick+0x1f2>
		case increment:
			if (button0)
				{
					tempC = tempC+1;
				}
			break;
 29a:	00 00       	nop
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <Tick+0x1f2>
		case decrement:
			if (button1)
				{
					tempC = tempC-1;
				}
			break;
 29e:	00 00       	nop
			
		default:
			break;
				
	}
}
 2a0:	00 00       	nop
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <main>:

int main(void) {
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
 2b0:	81 e2       	ldi	r24, 0x21	; 33
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	10 82       	st	Z, r1
 2b8:	82 e2       	ldi	r24, 0x22	; 34
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x01; // Configure port C's 8 pins as outputs
 2c2:	87 e2       	ldi	r24, 0x27	; 39
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
	

	tempC = 0;
 2d6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tempC>
	state = INIT;
 2da:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state+0x1>
 2de:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>

	while(1) {
		Tick();
 2e2:	e5 de       	rcall	.-566    	; 0xae <Tick>
		PORTC = tempC;
 2e4:	88 e2       	ldi	r24, 0x28	; 40
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <tempC>
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
	}
 2f0:	f8 cf       	rjmp	.-16     	; 0x2e2 <main+0x3a>

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
