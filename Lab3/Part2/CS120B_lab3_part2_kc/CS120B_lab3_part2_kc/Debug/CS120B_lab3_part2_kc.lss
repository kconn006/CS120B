
CS120B_lab3_part2_kc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a5  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ad  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	d2 d0       	rcall	.+420    	; 0x24e <main>
  aa:	f6 c0       	rjmp	.+492    	; 0x298 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
enum States{INIT, output7, reset, decrement, increment} state;
unsigned char button0 = 0x00;
unsigned char button1 = 0x00;
unsigned char tempC = 0x00;

void Tick() {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	
	button0 = PINA & 0x01; //PA0
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	80 81       	ld	r24, Z
  be:	81 70       	andi	r24, 0x01	; 1
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	button1 = PINA & 0x02; //PA1
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	82 70       	andi	r24, 0x02	; 2
  ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <button1>
	
	switch(state) 
  d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
  d6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <state+0x1>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	91 05       	cpc	r25, r1
  de:	d9 f1       	breq	.+118    	; 0x156 <Tick+0xa8>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	91 05       	cpc	r25, r1
  e4:	28 f4       	brcc	.+10     	; 0xf0 <Tick+0x42>
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	51 f0       	breq	.+20     	; 0xfe <Tick+0x50>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	79 f0       	breq	.+30     	; 0x10c <Tick+0x5e>
			}
			
			state = INIT;
			break;
		default:
			break;
  ee:	76 c0       	rjmp	.+236    	; 0x1dc <Tick+0x12e>
void Tick() {
	
	button0 = PINA & 0x01; //PA0
	button1 = PINA & 0x02; //PA1
	
	switch(state) 
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	91 05       	cpc	r25, r1
  f4:	09 f4       	brne	.+2      	; 0xf8 <Tick+0x4a>
  f6:	53 c0       	rjmp	.+166    	; 0x19e <Tick+0xf0>
  f8:	04 97       	sbiw	r24, 0x04	; 4
  fa:	91 f1       	breq	.+100    	; 0x160 <Tick+0xb2>
			}
			
			state = INIT;
			break;
		default:
			break;
  fc:	6f c0       	rjmp	.+222    	; 0x1dc <Tick+0x12e>
	button1 = PINA & 0x02; //PA1
	
	switch(state) 
	{ //transitions
		case INIT: //automatically go to output7
			state = output7;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 106:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 10a:	68 c0       	rjmp	.+208    	; 0x1dc <Tick+0x12e>
		case output7:
			if (button0 && button1) {
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	88 23       	and	r24, r24
 112:	59 f0       	breq	.+22     	; 0x12a <Tick+0x7c>
 114:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 118:	88 23       	and	r24, r24
 11a:	39 f0       	breq	.+14     	; 0x12a <Tick+0x7c>
				state = reset;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 124:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 128:	59 c0       	rjmp	.+178    	; 0x1dc <Tick+0x12e>
			}
			if (button0)
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12e:	88 23       	and	r24, r24
 130:	39 f0       	breq	.+14     	; 0x140 <Tick+0x92>
			{
				state = increment;
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 13a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 13e:	4e c0       	rjmp	.+156    	; 0x1dc <Tick+0x12e>
			}
			if (button1)
 140:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 144:	88 23       	and	r24, r24
 146:	39 f0       	breq	.+14     	; 0x156 <Tick+0xa8>
			{
				state = decrement;
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 150:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 154:	43 c0       	rjmp	.+134    	; 0x1dc <Tick+0x12e>
			}
		case reset:
			state = INIT;
 156:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state+0x1>
 15a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
			break;
 15e:	3e c0       	rjmp	.+124    	; 0x1dc <Tick+0x12e>
		case increment:
			if (button0 && button1) 
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 164:	88 23       	and	r24, r24
 166:	59 f0       	breq	.+22     	; 0x17e <Tick+0xd0>
 168:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 16c:	88 23       	and	r24, r24
 16e:	39 f0       	breq	.+14     	; 0x17e <Tick+0xd0>
				{
					state = reset;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 178:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
					break;
 17c:	2f c0       	rjmp	.+94     	; 0x1dc <Tick+0x12e>
				}
			if (tempC < 9)
 17e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 182:	89 30       	cpi	r24, 0x09	; 9
 184:	38 f4       	brcc	.+14     	; 0x194 <Tick+0xe6>
			{
				state = increment;
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 18e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 192:	24 c0       	rjmp	.+72     	; 0x1dc <Tick+0x12e>
			}
			
			state = INIT;
 194:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state+0x1>
 198:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
			break;
 19c:	1f c0       	rjmp	.+62     	; 0x1dc <Tick+0x12e>
		case decrement:
			if (button0 && button1) 
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a2:	88 23       	and	r24, r24
 1a4:	59 f0       	breq	.+22     	; 0x1bc <Tick+0x10e>
 1a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button1>
 1aa:	88 23       	and	r24, r24
 1ac:	39 f0       	breq	.+14     	; 0x1bc <Tick+0x10e>
				{
					state = reset;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 1b6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
					break;
 1ba:	10 c0       	rjmp	.+32     	; 0x1dc <Tick+0x12e>
				}
			if (tempC > 0)
 1bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 1c0:	88 23       	and	r24, r24
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <Tick+0x124>
			{
				state = decrement;
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <state+0x1>
 1cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <Tick+0x12e>
			}
			
			state = INIT;
 1d2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state+0x1>
 1d6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
			break;
 1da:	00 00       	nop
		default:
			break;
	}

	switch(state)
 1dc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
 1e0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <state+0x1>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	91 05       	cpc	r25, r1
 1e8:	91 f0       	breq	.+36     	; 0x20e <Tick+0x160>
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	91 05       	cpc	r25, r1
 1ee:	28 f4       	brcc	.+10     	; 0x1fa <Tick+0x14c>
 1f0:	00 97       	sbiw	r24, 0x00	; 0
 1f2:	21 f1       	breq	.+72     	; 0x23c <Tick+0x18e>
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	39 f0       	breq	.+14     	; 0x206 <Tick+0x158>
					tempC = tempC-1;
				}
			break;
			
		default:
			break;
 1f8:	26 c0       	rjmp	.+76     	; 0x246 <Tick+0x198>
			break;
		default:
			break;
	}

	switch(state)
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	91 05       	cpc	r25, r1
 1fe:	a1 f0       	breq	.+40     	; 0x228 <Tick+0x17a>
 200:	04 97       	sbiw	r24, 0x04	; 4
 202:	41 f0       	breq	.+16     	; 0x214 <Tick+0x166>
					tempC = tempC-1;
				}
			break;
			
		default:
			break;
 204:	20 c0       	rjmp	.+64     	; 0x246 <Tick+0x198>
	switch(state)
	{//State actions 
		case INIT:
			break;
		case output7:
			tempC = 0x07;
 206:	87 e0       	ldi	r24, 0x07	; 7
 208:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempC>
			break;
 20c:	1c c0       	rjmp	.+56     	; 0x246 <Tick+0x198>
		case reset:
			tempC = 0x00;
 20e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tempC>
			break;
 212:	19 c0       	rjmp	.+50     	; 0x246 <Tick+0x198>
		case increment:
			if (tempC < 9)
 214:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 218:	89 30       	cpi	r24, 0x09	; 9
 21a:	90 f4       	brcc	.+36     	; 0x240 <Tick+0x192>
				{
					tempC = tempC+1;
 21c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempC>
				}
			break;
 226:	0c c0       	rjmp	.+24     	; 0x240 <Tick+0x192>
		case decrement:
			if (tempC < 9)
 228:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 22c:	89 30       	cpi	r24, 0x09	; 9
 22e:	50 f4       	brcc	.+20     	; 0x244 <Tick+0x196>
				{
					tempC = tempC-1;
 230:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempC>
 234:	81 50       	subi	r24, 0x01	; 1
 236:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempC>
				}
			break;
 23a:	04 c0       	rjmp	.+8      	; 0x244 <Tick+0x196>
	}

	switch(state)
	{//State actions 
		case INIT:
			break;
 23c:	00 00       	nop
 23e:	03 c0       	rjmp	.+6      	; 0x246 <Tick+0x198>
		case increment:
			if (tempC < 9)
				{
					tempC = tempC+1;
				}
			break;
 240:	00 00       	nop
 242:	01 c0       	rjmp	.+2      	; 0x246 <Tick+0x198>
		case decrement:
			if (tempC < 9)
				{
					tempC = tempC-1;
				}
			break;
 244:	00 00       	nop
			
		default:
			break;
				
	}
}
 246:	00 00       	nop
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <main>:

int main(void) {
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
 256:	81 e2       	ldi	r24, 0x21	; 33
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	10 82       	st	Z, r1
 25e:	82 e2       	ldi	r24, 0x22	; 34
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x01; // Configure port C's 8 pins as outputs
 268:	87 e2       	ldi	r24, 0x27	; 39
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
 272:	88 e2       	ldi	r24, 0x28	; 40
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
	

	tempC = 0;
 27c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tempC>
	state = INIT;
 280:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state+0x1>
 284:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>

	while(1) {
		Tick();
 288:	12 df       	rcall	.-476    	; 0xae <Tick>
		PORTC = tempC;
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <tempC>
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
	}
 296:	f8 cf       	rjmp	.-16     	; 0x288 <main+0x3a>

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
