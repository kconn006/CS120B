
Pong_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000816  000008aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000816  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800166  00800166  00000910  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f95  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091a  00000000  00000000  00001a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab0  00000000  00000000  0000231f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00002dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e8  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000818  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b9 c0       	rjmp	.+370    	; 0x1a8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 36       	cpi	r26, 0x66	; 102
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e6       	ldi	r26, 0x66	; 102
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 37       	cpi	r26, 0x7E	; 126
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	86 d2       	rcall	.+1292   	; 0x5d0 <main>
  c4:	a6 c3       	rjmp	.+1868   	; 0x812 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		
		PORTA = qm_turn_on;
		PORTB = qm_column_num;
		
		 
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <TimerSet+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <TimerSet+0x8>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	69 83       	std	Y+1, r22	; 0x01
  d6:	7a 83       	std	Y+2, r23	; 0x02
  d8:	8b 83       	std	Y+3, r24	; 0x03
  da:	9c 83       	std	Y+4, r25	; 0x04
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	ab 81       	ldd	r26, Y+3	; 0x03
  e2:	bc 81       	ldd	r27, Y+4	; 0x04
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  ec:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
  f0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 100:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 104:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_avr_timer_cntcurr>
 108:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <_avr_timer_cntcurr+0x1>
 10c:	a0 93 69 01 	sts	0x0169, r26	; 0x800169 <_avr_timer_cntcurr+0x2>
 110:	b0 93 6a 01 	sts	0x016A, r27	; 0x80016a <_avr_timer_cntcurr+0x3>
 114:	00 00       	nop
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <TimerOn>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	81 e8       	ldi	r24, 0x81	; 129
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2b e0       	ldi	r18, 0x0B	; 11
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	88 e8       	ldi	r24, 0x88	; 136
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2d e7       	ldi	r18, 0x7D	; 125
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	31 83       	std	Z+1, r19	; 0x01
 142:	20 83       	st	Z, r18
 144:	8f e6       	ldi	r24, 0x6F	; 111
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	22 e0       	ldi	r18, 0x02	; 2
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	11 82       	std	Z+1, r1	; 0x01
 156:	10 82       	st	Z, r1
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 160:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 164:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 168:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_avr_timer_cntcurr>
 16c:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <_avr_timer_cntcurr+0x1>
 170:	a0 93 69 01 	sts	0x0169, r26	; 0x800169 <_avr_timer_cntcurr+0x2>
 174:	b0 93 6a 01 	sts	0x016A, r27	; 0x80016a <_avr_timer_cntcurr+0x3>
 178:	8f e5       	ldi	r24, 0x5F	; 95
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2f e5       	ldi	r18, 0x5F	; 95
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	20 68       	ori	r18, 0x80	; 128
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
 18a:	00 00       	nop
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <TimerISR>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
 1a0:	00 00       	nop
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__vector_13>:
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1b8:	0f 92       	push	r0
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_avr_timer_cntcurr>
 1de:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <_avr_timer_cntcurr+0x1>
 1e2:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <_avr_timer_cntcurr+0x2>
 1e6:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <_avr_timer_cntcurr+0x3>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	a1 09       	sbc	r26, r1
 1ee:	b1 09       	sbc	r27, r1
 1f0:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_avr_timer_cntcurr>
 1f4:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <_avr_timer_cntcurr+0x1>
 1f8:	a0 93 69 01 	sts	0x0169, r26	; 0x800169 <_avr_timer_cntcurr+0x2>
 1fc:	b0 93 6a 01 	sts	0x016A, r27	; 0x80016a <_avr_timer_cntcurr+0x3>
 200:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_avr_timer_cntcurr>
 204:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <_avr_timer_cntcurr+0x1>
 208:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <_avr_timer_cntcurr+0x2>
 20c:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <_avr_timer_cntcurr+0x3>
 210:	89 2b       	or	r24, r25
 212:	8a 2b       	or	r24, r26
 214:	8b 2b       	or	r24, r27
 216:	89 f4       	brne	.+34     	; 0x23a <__vector_13+0x92>
 218:	bc df       	rcall	.-136    	; 0x192 <TimerISR>
 21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 21e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 222:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 226:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 22a:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_avr_timer_cntcurr>
 22e:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <_avr_timer_cntcurr+0x1>
 232:	a0 93 69 01 	sts	0x0169, r26	; 0x800169 <_avr_timer_cntcurr+0x2>
 236:	b0 93 6a 01 	sts	0x016A, r27	; 0x80016a <_avr_timer_cntcurr+0x3>
 23a:	00 00       	nop
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 25e:	0f 90       	pop	r0
 260:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <LCD_ClearScreen>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	1a d0       	rcall	.+52     	; 0x2aa <LCD_WriteCommand>
 276:	00 00       	nop
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <LCD_init>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	84 e6       	ldi	r24, 0x64	; 100
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	82 d0       	rcall	.+260    	; 0x390 <delay_ms>
 28c:	88 e3       	ldi	r24, 0x38	; 56
 28e:	0d d0       	rcall	.+26     	; 0x2aa <LCD_WriteCommand>
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	0b d0       	rcall	.+22     	; 0x2aa <LCD_WriteCommand>
 294:	8f e0       	ldi	r24, 0x0F	; 15
 296:	09 d0       	rcall	.+18     	; 0x2aa <LCD_WriteCommand>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	07 d0       	rcall	.+14     	; 0x2aa <LCD_WriteCommand>
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	77 d0       	rcall	.+238    	; 0x390 <delay_ms>
 2a2:	00 00       	nop
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <LCD_WriteCommand>:
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	1f 92       	push	r1
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	88 e2       	ldi	r24, 0x28	; 40
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	28 e2       	ldi	r18, 0x28	; 40
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	f9 01       	movw	r30, r18
 2c0:	20 81       	ld	r18, Z
 2c2:	2f 77       	andi	r18, 0x7F	; 127
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18
 2c8:	8b e2       	ldi	r24, 0x2B	; 43
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
 2d2:	88 e2       	ldi	r24, 0x28	; 40
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	28 e2       	ldi	r18, 0x28	; 40
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	f9 01       	movw	r30, r18
 2dc:	20 81       	ld	r18, Z
 2de:	20 64       	ori	r18, 0x40	; 64
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
 2e4:	00 00       	nop
 2e6:	88 e2       	ldi	r24, 0x28	; 40
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	28 e2       	ldi	r18, 0x28	; 40
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	f9 01       	movw	r30, r18
 2f0:	20 81       	ld	r18, Z
 2f2:	2f 7b       	andi	r18, 0xBF	; 191
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	49 d0       	rcall	.+146    	; 0x390 <delay_ms>
 2fe:	00 00       	nop
 300:	0f 90       	pop	r0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <LCD_WriteData>:
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	1f 92       	push	r1
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	88 e2       	ldi	r24, 0x28	; 40
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	28 e2       	ldi	r18, 0x28	; 40
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	f9 01       	movw	r30, r18
 31e:	20 81       	ld	r18, Z
 320:	20 68       	ori	r18, 0x80	; 128
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18
 326:	8b e2       	ldi	r24, 0x2B	; 43
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	29 81       	ldd	r18, Y+1	; 0x01
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
 330:	88 e2       	ldi	r24, 0x28	; 40
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	28 e2       	ldi	r18, 0x28	; 40
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	20 64       	ori	r18, 0x40	; 64
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
 342:	00 00       	nop
 344:	88 e2       	ldi	r24, 0x28	; 40
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	28 e2       	ldi	r18, 0x28	; 40
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	f9 01       	movw	r30, r18
 34e:	20 81       	ld	r18, Z
 350:	2f 7b       	andi	r18, 0xBF	; 191
 352:	fc 01       	movw	r30, r24
 354:	20 83       	st	Z, r18
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	1a d0       	rcall	.+52     	; 0x390 <delay_ms>
 35c:	00 00       	nop
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <LCD_Cursor>:
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	1f 92       	push	r1
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	89 83       	std	Y+1, r24	; 0x01
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	81 31       	cpi	r24, 0x11	; 17
 376:	20 f4       	brcc	.+8      	; 0x380 <LCD_Cursor+0x1a>
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	81 58       	subi	r24, 0x81	; 129
 37c:	96 df       	rcall	.-212    	; 0x2aa <LCD_WriteCommand>
 37e:	03 c0       	rjmp	.+6      	; 0x386 <LCD_Cursor+0x20>
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	81 55       	subi	r24, 0x51	; 81
 384:	92 df       	rcall	.-220    	; 0x2aa <LCD_WriteCommand>
 386:	00 00       	nop
 388:	0f 90       	pop	r0
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <delay_ms>:
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	00 d0       	rcall	.+0      	; 0x396 <delay_ms+0x6>
 396:	00 d0       	rcall	.+0      	; 0x398 <delay_ms+0x8>
 398:	00 d0       	rcall	.+0      	; 0x39a <delay_ms+0xa>
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	9e 83       	std	Y+6, r25	; 0x06
 3a0:	8d 83       	std	Y+5, r24	; 0x05
 3a2:	1a 82       	std	Y+2, r1	; 0x02
 3a4:	19 82       	std	Y+1, r1	; 0x01
 3a6:	13 c0       	rjmp	.+38     	; 0x3ce <delay_ms+0x3e>
 3a8:	1c 82       	std	Y+4, r1	; 0x04
 3aa:	1b 82       	std	Y+3, r1	; 0x03
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <delay_ms+0x2a>
 3ae:	00 00       	nop
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	9c 81       	ldd	r25, Y+4	; 0x04
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	9c 83       	std	Y+4, r25	; 0x04
 3b8:	8b 83       	std	Y+3, r24	; 0x03
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	9c 81       	ldd	r25, Y+4	; 0x04
 3be:	87 30       	cpi	r24, 0x07	; 7
 3c0:	93 40       	sbci	r25, 0x03	; 3
 3c2:	ac f3       	brlt	.-22     	; 0x3ae <delay_ms+0x1e>
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	9a 81       	ldd	r25, Y+2	; 0x02
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	9a 83       	std	Y+2, r25	; 0x02
 3cc:	89 83       	std	Y+1, r24	; 0x01
 3ce:	29 81       	ldd	r18, Y+1	; 0x01
 3d0:	3a 81       	ldd	r19, Y+2	; 0x02
 3d2:	8d 81       	ldd	r24, Y+5	; 0x05
 3d4:	9e 81       	ldd	r25, Y+6	; 0x06
 3d6:	28 17       	cp	r18, r24
 3d8:	39 07       	cpc	r19, r25
 3da:	34 f3       	brlt	.-52     	; 0x3a8 <delay_ms+0x18>
 3dc:	00 00       	nop
 3de:	26 96       	adiw	r28, 0x06	; 6
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <menu_str_tick>:
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	00 d0       	rcall	.+0      	; 0x3f6 <menu_str_tick+0x6>
 3f6:	00 d0       	rcall	.+0      	; 0x3f8 <menu_str_tick+0x8>
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	9c 83       	std	Y+4, r25	; 0x04
 3fe:	8b 83       	std	Y+3, r24	; 0x03
 400:	8b 81       	ldd	r24, Y+3	; 0x03
 402:	9c 81       	ldd	r25, Y+4	; 0x04
 404:	89 2b       	or	r24, r25
 406:	79 f5       	brne	.+94     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	9a 83       	std	Y+2, r25	; 0x02
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	21 c0       	rjmp	.+66     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	a8 df       	rcall	.-176    	; 0x366 <LCD_Cursor>
 416:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <m_cnt>
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	9a 81       	ldd	r25, Y+2	; 0x02
 422:	82 0f       	add	r24, r18
 424:	93 1f       	adc	r25, r19
 426:	02 97       	sbiw	r24, 0x02	; 2
 428:	8c 5f       	subi	r24, 0xFC	; 252
 42a:	9e 4f       	sbci	r25, 0xFE	; 254
 42c:	fc 01       	movw	r30, r24
 42e:	80 81       	ld	r24, Z
 430:	6b df       	rcall	.-298    	; 0x308 <LCD_WriteData>
 432:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <m_cnt>
 436:	28 2f       	mov	r18, r24
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	9a 81       	ldd	r25, Y+2	; 0x02
 43e:	82 0f       	add	r24, r18
 440:	93 1f       	adc	r25, r19
 442:	89 97       	sbiw	r24, 0x29	; 41
 444:	11 f4       	brne	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <m_cnt>
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	9a 83       	std	Y+2, r25	; 0x02
 452:	89 83       	std	Y+1, r24	; 0x01
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	9a 81       	ldd	r25, Y+2	; 0x02
 458:	41 97       	sbiw	r24, 0x11	; 17
 45a:	d8 f2       	brcs	.-74     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 45c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <m_cnt>
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <m_cnt>
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	9c 81       	ldd	r25, Y+4	; 0x04
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <player_str_tick>:
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	00 d0       	rcall	.+0      	; 0x47e <player_str_tick+0x6>
 47e:	00 d0       	rcall	.+0      	; 0x480 <player_str_tick+0x8>
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	9c 83       	std	Y+4, r25	; 0x04
 486:	8b 83       	std	Y+3, r24	; 0x03
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	9c 81       	ldd	r25, Y+4	; 0x04
 48c:	89 2b       	or	r24, r25
 48e:	79 f5       	brne	.+94     	; 0x4ee <player_str_tick+0x76>
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	9a 83       	std	Y+2, r25	; 0x02
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	21 c0       	rjmp	.+66     	; 0x4dc <player_str_tick+0x64>
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	64 df       	rcall	.-312    	; 0x366 <LCD_Cursor>
 49e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <p_cnt>
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	89 81       	ldd	r24, Y+1	; 0x01
 4a8:	9a 81       	ldd	r25, Y+2	; 0x02
 4aa:	82 0f       	add	r24, r18
 4ac:	93 1f       	adc	r25, r19
 4ae:	02 97       	sbiw	r24, 0x02	; 2
 4b0:	84 5d       	subi	r24, 0xD4	; 212
 4b2:	9e 4f       	sbci	r25, 0xFE	; 254
 4b4:	fc 01       	movw	r30, r24
 4b6:	80 81       	ld	r24, Z
 4b8:	27 df       	rcall	.-434    	; 0x308 <LCD_WriteData>
 4ba:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <p_cnt>
 4be:	28 2f       	mov	r18, r24
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	9a 81       	ldd	r25, Y+2	; 0x02
 4c6:	82 0f       	add	r24, r18
 4c8:	93 1f       	adc	r25, r19
 4ca:	c9 97       	sbiw	r24, 0x39	; 57
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <player_str_tick+0x5a>
 4ce:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <p_cnt>
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	9a 81       	ldd	r25, Y+2	; 0x02
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	9a 83       	std	Y+2, r25	; 0x02
 4da:	89 83       	std	Y+1, r24	; 0x01
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	9a 81       	ldd	r25, Y+2	; 0x02
 4e0:	41 97       	sbiw	r24, 0x11	; 17
 4e2:	d8 f2       	brcs	.-74     	; 0x49a <player_str_tick+0x22>
 4e4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <p_cnt>
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <p_cnt>
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	9c 81       	ldd	r25, Y+4	; 0x04
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <menu_tick>:
	
enum Menu_States{MENU_MAIN, MENU_Press, MENU_PLAYERS } menu_state;
void menu_tick() {
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	1f 92       	push	r1
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
	uc start_button = ~PINC & 0x01; //Start = C0
 50a:	86 e2       	ldi	r24, 0x26	; 38
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	fc 01       	movw	r30, r24
 510:	80 81       	ld	r24, Z
 512:	88 2f       	mov	r24, r24
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	81 70       	andi	r24, 0x01	; 1
 518:	99 27       	eor	r25, r25
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	89 2b       	or	r24, r25
 51e:	09 f0       	breq	.+2      	; 0x522 <menu_tick+0x22>
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	29 83       	std	Y+1, r18	; 0x01
	switch(menu_state) 
 524:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <menu_state>
 528:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <menu_state+0x1>
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	91 05       	cpc	r25, r1
 530:	b9 f0       	breq	.+46     	; 0x560 <menu_tick+0x60>
 532:	81 30       	cpi	r24, 0x01	; 1
 534:	91 05       	cpc	r25, r1
 536:	18 f0       	brcs	.+6      	; 0x53e <menu_tick+0x3e>
 538:	02 97       	sbiw	r24, 0x02	; 2
 53a:	29 f1       	breq	.+74     	; 0x586 <menu_tick+0x86>
			}
		break;
		case MENU_PLAYERS:
			menu_state = MENU_PLAYERS;
		default:
		break;
 53c:	2e c0       	rjmp	.+92     	; 0x59a <menu_tick+0x9a>
void menu_tick() {
	uc start_button = ~PINC & 0x01; //Start = C0
	switch(menu_state) 
	{//Transitions
		case MENU_MAIN:
			if(!start_button){
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	88 23       	and	r24, r24
 542:	21 f4       	brne	.+8      	; 0x54c <menu_tick+0x4c>
				menu_state = MENU_MAIN;
 544:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <menu_state+0x1>
 548:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <menu_state>
			}
			if(start_button){
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	88 23       	and	r24, r24
 550:	09 f1       	breq	.+66     	; 0x594 <menu_tick+0x94>
				menu_state = MENU_Press;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <menu_state+0x1>
 55a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <menu_state>
			}
		break;
 55e:	1a c0       	rjmp	.+52     	; 0x594 <menu_tick+0x94>
		case MENU_Press:
			if (!start_button)
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	88 23       	and	r24, r24
 564:	31 f4       	brne	.+12     	; 0x572 <menu_tick+0x72>
			{
				menu_state = MENU_PLAYERS;
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <menu_state+0x1>
 56e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <menu_state>
			}
			if (start_button)
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	88 23       	and	r24, r24
 576:	81 f0       	breq	.+32     	; 0x598 <menu_tick+0x98>
			{
				menu_state = MENU_Press;
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <menu_state+0x1>
 580:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <menu_state>
			}
		break;
 584:	09 c0       	rjmp	.+18     	; 0x598 <menu_tick+0x98>
		case MENU_PLAYERS:
			menu_state = MENU_PLAYERS;
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <menu_state+0x1>
 58e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <menu_state>
		default:
		break;
 592:	03 c0       	rjmp	.+6      	; 0x59a <menu_tick+0x9a>
				menu_state = MENU_MAIN;
			}
			if(start_button){
				menu_state = MENU_Press;
			}
		break;
 594:	00 00       	nop
 596:	01 c0       	rjmp	.+2      	; 0x59a <menu_tick+0x9a>
			}
			if (start_button)
			{
				menu_state = MENU_Press;
			}
		break;
 598:	00 00       	nop
		case MENU_PLAYERS:
			menu_state = MENU_PLAYERS;
		default:
		break;
	}
	switch(menu_state)
 59a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <menu_state>
 59e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <menu_state+0x1>
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	91 05       	cpc	r25, r1
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <menu_tick+0xc4>
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	91 05       	cpc	r25, r1
 5ac:	18 f0       	brcs	.+6      	; 0x5b4 <menu_tick+0xb4>
 5ae:	02 97       	sbiw	r24, 0x02	; 2
 5b0:	29 f0       	breq	.+10     	; 0x5bc <menu_tick+0xbc>
		case MENU_PLAYERS:
			player_str_tick(p_init);
			//question_mark_tick();
			break;
		default:
		break;
 5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <menu_tick+0xc6>
		break;
	}
	switch(menu_state)
	{//State Actions
		case MENU_MAIN:
			menu_str_tick(m_init);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	1b df       	rcall	.-458    	; 0x3f0 <menu_str_tick>
			//question_mark_tick();
		break;
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <menu_tick+0xc6>
		case MENU_Press:
		break;
		case MENU_PLAYERS:
			player_str_tick(p_init);
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	5b df       	rcall	.-330    	; 0x478 <player_str_tick>
			//question_mark_tick();
			break;
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <menu_tick+0xc6>
		case MENU_MAIN:
			menu_str_tick(m_init);
			//question_mark_tick();
		break;
		case MENU_Press:
		break;
 5c4:	00 00       	nop
		default:
		break;
	}
	
	
}
 5c6:	00 00       	nop
 5c8:	0f 90       	pop	r0
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

000005d0 <main>:


int main(void)
{
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
 5dc:	2e 97       	sbiw	r28, 0x0e	; 14
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 5e8:	84 e2       	ldi	r24, 0x24	; 36
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	2f ef       	ldi	r18, 0xFF	; 255
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 83       	st	Z, r18
 5f2:	85 e2       	ldi	r24, 0x25	; 37
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	fc 01       	movw	r30, r24
 5f8:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 5fa:	87 e2       	ldi	r24, 0x27	; 39
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	20 ef       	ldi	r18, 0xF0	; 240
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
 604:	88 e2       	ldi	r24, 0x28	; 40
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	2f e0       	ldi	r18, 0x0F	; 15
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
	DDRA = 0xFF; PORTA = 0x00; //outputs
 60e:	81 e2       	ldi	r24, 0x21	; 33
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	2f ef       	ldi	r18, 0xFF	; 255
 614:	fc 01       	movw	r30, r24
 616:	20 83       	st	Z, r18
 618:	82 e2       	ldi	r24, 0x22	; 34
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	fc 01       	movw	r30, r24
 61e:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;
 620:	8a e2       	ldi	r24, 0x2A	; 42
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	2f ef       	ldi	r18, 0xFF	; 255
 626:	fc 01       	movw	r30, r24
 628:	20 83       	st	Z, r18
 62a:	8b e2       	ldi	r24, 0x2B	; 43
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	fc 01       	movw	r30, r24
 630:	10 82       	st	Z, r1
	
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = 15;
 632:	8f e0       	ldi	r24, 0x0F	; 15
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	a0 e0       	ldi	r26, 0x00	; 0
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	8b 83       	std	Y+3, r24	; 0x03
 63c:	9c 83       	std	Y+4, r25	; 0x04
 63e:	ad 83       	std	Y+5, r26	; 0x05
 640:	be 83       	std	Y+6, r27	; 0x06

	//Recalculate GCD periods for scheduler
	unsigned long int lcd_period = 15;
 642:	8f e0       	ldi	r24, 0x0F	; 15
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	a0 e0       	ldi	r26, 0x00	; 0
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	8f 83       	std	Y+7, r24	; 0x07
 64c:	98 87       	std	Y+8, r25	; 0x08
 64e:	a9 87       	std	Y+9, r26	; 0x09
 650:	ba 87       	std	Y+10, r27	; 0x0a
	
	//Declare an array of tasks
	static task task1;
	task *tasks[] = { &task1 };
 652:	8b e6       	ldi	r24, 0x6B	; 107
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	9e 87       	std	Y+14, r25	; 0x0e
 658:	8d 87       	std	Y+13, r24	; 0x0d
	const unsigned short numTasks = sizeof(tasks) / sizeof(task*);
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	9c 87       	std	Y+12, r25	; 0x0c
 660:	8b 87       	std	Y+11, r24	; 0x0b
	
	//task1
	task1.state = 0;//Task initial state.
 662:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <task1.2146>
	task1.period = lcd_period;//Task Period.
 666:	8f 81       	ldd	r24, Y+7	; 0x07
 668:	98 85       	ldd	r25, Y+8	; 0x08
 66a:	a9 85       	ldd	r26, Y+9	; 0x09
 66c:	ba 85       	ldd	r27, Y+10	; 0x0a
 66e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <task1.2146+0x1>
 672:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <task1.2146+0x2>
 676:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <task1.2146+0x3>
 67a:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <task1.2146+0x4>
	task1.elapsedTime = lcd_period;//Task current elapsed time.
 67e:	8f 81       	ldd	r24, Y+7	; 0x07
 680:	98 85       	ldd	r25, Y+8	; 0x08
 682:	a9 85       	ldd	r26, Y+9	; 0x09
 684:	ba 85       	ldd	r27, Y+10	; 0x0a
 686:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <task1.2146+0x5>
 68a:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <task1.2146+0x6>
 68e:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <task1.2146+0x7>
 692:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <task1.2146+0x8>
	task1.TickFct = &menu_tick;//Function pointer for the tick.
 696:	80 e8       	ldi	r24, 0x80	; 128
 698:	92 e0       	ldi	r25, 0x02	; 2
 69a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <task1.2146+0xa>
 69e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <task1.2146+0x9>
	
	// Set the timer and turn it on
	TimerSet(GCD);
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	9c 81       	ldd	r25, Y+4	; 0x04
 6a6:	ad 81       	ldd	r26, Y+5	; 0x05
 6a8:	be 81       	ldd	r27, Y+6	; 0x06
 6aa:	bc 01       	movw	r22, r24
 6ac:	cd 01       	movw	r24, r26
 6ae:	0c dd       	rcall	.-1512   	; 0xc8 <TimerSet>
	TimerOn();
 6b0:	39 dd       	rcall	.-1422   	; 0x124 <TimerOn>
	LCD_init();
 6b2:	e5 dd       	rcall	.-1078   	; 0x27e <LCD_init>
 6b4:	da dd       	rcall	.-1100   	; 0x26a <LCD_ClearScreen>
	LCD_ClearScreen();
 6b6:	1a 82       	std	Y+2, r1	; 0x02
 6b8:	19 82       	std	Y+1, r1	; 0x01
	//unsigned char tmp = 0;
	
	while(1) {

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 6ba:	9b c0       	rjmp	.+310    	; 0x7f2 <main+0x222>
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	9a 81       	ldd	r25, Y+2	; 0x02
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	9e 01       	movw	r18, r28
 6c6:	2f 5f       	subi	r18, 0xFF	; 255
 6c8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ca:	82 0f       	add	r24, r18
 6cc:	93 1f       	adc	r25, r19
 6ce:	0c 96       	adiw	r24, 0x0c	; 12
 6d0:	fc 01       	movw	r30, r24
 6d2:	80 81       	ld	r24, Z
 6d4:	91 81       	ldd	r25, Z+1	; 0x01
 6d6:	fc 01       	movw	r30, r24
 6d8:	25 81       	ldd	r18, Z+5	; 0x05
 6da:	36 81       	ldd	r19, Z+6	; 0x06
 6dc:	47 81       	ldd	r20, Z+7	; 0x07
 6de:	50 85       	ldd	r21, Z+8	; 0x08
 6e0:	89 81       	ldd	r24, Y+1	; 0x01
 6e2:	9a 81       	ldd	r25, Y+2	; 0x02
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	be 01       	movw	r22, r28
 6ea:	6f 5f       	subi	r22, 0xFF	; 255
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	86 0f       	add	r24, r22
 6f0:	97 1f       	adc	r25, r23
 6f2:	0c 96       	adiw	r24, 0x0c	; 12
 6f4:	fc 01       	movw	r30, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	91 81       	ldd	r25, Z+1	; 0x01
 6fa:	fc 01       	movw	r30, r24
 6fc:	81 81       	ldd	r24, Z+1	; 0x01
 6fe:	92 81       	ldd	r25, Z+2	; 0x02
 700:	a3 81       	ldd	r26, Z+3	; 0x03
 702:	b4 81       	ldd	r27, Z+4	; 0x04
 704:	28 17       	cp	r18, r24
 706:	39 07       	cpc	r19, r25
 708:	4a 07       	cpc	r20, r26
 70a:	5b 07       	cpc	r21, r27
 70c:	09 f0       	breq	.+2      	; 0x710 <main+0x140>
 70e:	45 c0       	rjmp	.+138    	; 0x79a <main+0x1ca>
 710:	89 81       	ldd	r24, Y+1	; 0x01
 712:	9a 81       	ldd	r25, Y+2	; 0x02
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	9e 01       	movw	r18, r28
 71a:	2f 5f       	subi	r18, 0xFF	; 255
 71c:	3f 4f       	sbci	r19, 0xFF	; 255
 71e:	82 0f       	add	r24, r18
 720:	93 1f       	adc	r25, r19
 722:	0c 96       	adiw	r24, 0x0c	; 12
 724:	fc 01       	movw	r30, r24
 726:	00 81       	ld	r16, Z
 728:	11 81       	ldd	r17, Z+1	; 0x01
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	9a 81       	ldd	r25, Y+2	; 0x02
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	9e 01       	movw	r18, r28
 734:	2f 5f       	subi	r18, 0xFF	; 255
 736:	3f 4f       	sbci	r19, 0xFF	; 255
 738:	82 0f       	add	r24, r18
 73a:	93 1f       	adc	r25, r19
 73c:	0c 96       	adiw	r24, 0x0c	; 12
 73e:	fc 01       	movw	r30, r24
 740:	80 81       	ld	r24, Z
 742:	91 81       	ldd	r25, Z+1	; 0x01
 744:	fc 01       	movw	r30, r24
 746:	21 85       	ldd	r18, Z+9	; 0x09
 748:	32 85       	ldd	r19, Z+10	; 0x0a
 74a:	89 81       	ldd	r24, Y+1	; 0x01
 74c:	9a 81       	ldd	r25, Y+2	; 0x02
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	ae 01       	movw	r20, r28
 754:	4f 5f       	subi	r20, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	84 0f       	add	r24, r20
 75a:	95 1f       	adc	r25, r21
 75c:	0c 96       	adiw	r24, 0x0c	; 12
 75e:	fc 01       	movw	r30, r24
 760:	80 81       	ld	r24, Z
 762:	91 81       	ldd	r25, Z+1	; 0x01
 764:	fc 01       	movw	r30, r24
 766:	80 81       	ld	r24, Z
 768:	08 2e       	mov	r0, r24
 76a:	00 0c       	add	r0, r0
 76c:	99 0b       	sbc	r25, r25
 76e:	f9 01       	movw	r30, r18
 770:	09 95       	icall
 772:	f8 01       	movw	r30, r16
 774:	80 83       	st	Z, r24
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	9a 81       	ldd	r25, Y+2	; 0x02
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	9e 01       	movw	r18, r28
 780:	2f 5f       	subi	r18, 0xFF	; 255
 782:	3f 4f       	sbci	r19, 0xFF	; 255
 784:	82 0f       	add	r24, r18
 786:	93 1f       	adc	r25, r19
 788:	0c 96       	adiw	r24, 0x0c	; 12
 78a:	fc 01       	movw	r30, r24
 78c:	80 81       	ld	r24, Z
 78e:	91 81       	ldd	r25, Z+1	; 0x01
 790:	fc 01       	movw	r30, r24
 792:	15 82       	std	Z+5, r1	; 0x05
 794:	16 82       	std	Z+6, r1	; 0x06
 796:	17 82       	std	Z+7, r1	; 0x07
 798:	10 86       	std	Z+8, r1	; 0x08
 79a:	89 81       	ldd	r24, Y+1	; 0x01
 79c:	9a 81       	ldd	r25, Y+2	; 0x02
			}
			tasks[i]->elapsedTime += 1;
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	9e 01       	movw	r18, r28
 7a4:	2f 5f       	subi	r18, 0xFF	; 255
 7a6:	3f 4f       	sbci	r19, 0xFF	; 255
 7a8:	82 0f       	add	r24, r18
 7aa:	93 1f       	adc	r25, r19
 7ac:	0c 96       	adiw	r24, 0x0c	; 12
 7ae:	fc 01       	movw	r30, r24
 7b0:	20 81       	ld	r18, Z
 7b2:	31 81       	ldd	r19, Z+1	; 0x01
 7b4:	89 81       	ldd	r24, Y+1	; 0x01
 7b6:	9a 81       	ldd	r25, Y+2	; 0x02
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	ae 01       	movw	r20, r28
 7be:	4f 5f       	subi	r20, 0xFF	; 255
 7c0:	5f 4f       	sbci	r21, 0xFF	; 255
 7c2:	84 0f       	add	r24, r20
 7c4:	95 1f       	adc	r25, r21
 7c6:	0c 96       	adiw	r24, 0x0c	; 12
 7c8:	fc 01       	movw	r30, r24
 7ca:	80 81       	ld	r24, Z
 7cc:	91 81       	ldd	r25, Z+1	; 0x01
 7ce:	fc 01       	movw	r30, r24
 7d0:	85 81       	ldd	r24, Z+5	; 0x05
 7d2:	96 81       	ldd	r25, Z+6	; 0x06
 7d4:	a7 81       	ldd	r26, Z+7	; 0x07
 7d6:	b0 85       	ldd	r27, Z+8	; 0x08
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	a1 1d       	adc	r26, r1
 7dc:	b1 1d       	adc	r27, r1
 7de:	f9 01       	movw	r30, r18
 7e0:	85 83       	std	Z+5, r24	; 0x05
 7e2:	96 83       	std	Z+6, r25	; 0x06
 7e4:	a7 83       	std	Z+7, r26	; 0x07
 7e6:	b0 87       	std	Z+8, r27	; 0x08
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	9a 81       	ldd	r25, Y+2	; 0x02
	//unsigned char tmp = 0;
	
	while(1) {

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	9a 83       	std	Y+2, r25	; 0x02
 7f0:	89 83       	std	Y+1, r24	; 0x01
 7f2:	29 81       	ldd	r18, Y+1	; 0x01
 7f4:	3a 81       	ldd	r19, Y+2	; 0x02
 7f6:	8b 85       	ldd	r24, Y+11	; 0x0b
 7f8:	9c 85       	ldd	r25, Y+12	; 0x0c
 7fa:	28 17       	cp	r18, r24
 7fc:	39 07       	cpc	r19, r25
 7fe:	08 f4       	brcc	.+2      	; 0x802 <main+0x232>
 800:	5d cf       	rjmp	.-326    	; 0x6bc <main+0xec>
 802:	00 00       	nop
 804:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
			while(!TimerFlag);
 808:	88 23       	and	r24, r24
 80a:	e1 f3       	breq	.-8      	; 0x804 <main+0x234>
 80c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
			TimerFlag = 0;
 810:	52 cf       	rjmp	.-348    	; 0x6b6 <main+0xe6>

00000812 <_exit>:
 812:	f8 94       	cli

00000814 <__stop_program>:

	} //end while
 814:	ff cf       	rjmp	.-2      	; 0x814 <__stop_program>
