
Pong_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000c90  00000d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080016e  0080016e  00000d92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123a  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094e  00000000  00000000  0000214e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee6  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00003984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000900  00000000  00000000  00003dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092b  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004ffb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b9 c0       	rjmp	.+370    	; 0x1a8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 36       	cpi	r26, 0x6E	; 110
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e6       	ldi	r26, 0x6E	; 110
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 39       	cpi	r26, 0x96	; 150
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	21 d4       	rcall	.+2114   	; 0x906 <main>
  c4:	e3 c5       	rjmp	.+3014   	; 0xc8c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		
		PORTA = qm_turn_on;
		PORTB = qm_column_num;
		
		 
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <TimerSet+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <TimerSet+0x8>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	69 83       	std	Y+1, r22	; 0x01
  d6:	7a 83       	std	Y+2, r23	; 0x02
  d8:	8b 83       	std	Y+3, r24	; 0x03
  da:	9c 83       	std	Y+4, r25	; 0x04
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	ab 81       	ldd	r26, Y+3	; 0x03
  e2:	bc 81       	ldd	r27, Y+4	; 0x04
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  ec:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
  f0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 100:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 104:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <_avr_timer_cntcurr>
 108:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <_avr_timer_cntcurr+0x1>
 10c:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <_avr_timer_cntcurr+0x2>
 110:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <_avr_timer_cntcurr+0x3>
 114:	00 00       	nop
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <TimerOn>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	81 e8       	ldi	r24, 0x81	; 129
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2b e0       	ldi	r18, 0x0B	; 11
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	88 e8       	ldi	r24, 0x88	; 136
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2d e7       	ldi	r18, 0x7D	; 125
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	31 83       	std	Z+1, r19	; 0x01
 142:	20 83       	st	Z, r18
 144:	8f e6       	ldi	r24, 0x6F	; 111
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	22 e0       	ldi	r18, 0x02	; 2
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	11 82       	std	Z+1, r1	; 0x01
 156:	10 82       	st	Z, r1
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 160:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 164:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 168:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <_avr_timer_cntcurr>
 16c:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <_avr_timer_cntcurr+0x1>
 170:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <_avr_timer_cntcurr+0x2>
 174:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <_avr_timer_cntcurr+0x3>
 178:	8f e5       	ldi	r24, 0x5F	; 95
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2f e5       	ldi	r18, 0x5F	; 95
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	20 68       	ori	r18, 0x80	; 128
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
 18a:	00 00       	nop
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <TimerISR>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
 1a0:	00 00       	nop
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__vector_13>:
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1b8:	0f 92       	push	r0
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_avr_timer_cntcurr>
 1de:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_avr_timer_cntcurr+0x1>
 1e2:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <_avr_timer_cntcurr+0x2>
 1e6:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <_avr_timer_cntcurr+0x3>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	a1 09       	sbc	r26, r1
 1ee:	b1 09       	sbc	r27, r1
 1f0:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <_avr_timer_cntcurr>
 1f4:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <_avr_timer_cntcurr+0x1>
 1f8:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <_avr_timer_cntcurr+0x2>
 1fc:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <_avr_timer_cntcurr+0x3>
 200:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_avr_timer_cntcurr>
 204:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_avr_timer_cntcurr+0x1>
 208:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <_avr_timer_cntcurr+0x2>
 20c:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <_avr_timer_cntcurr+0x3>
 210:	89 2b       	or	r24, r25
 212:	8a 2b       	or	r24, r26
 214:	8b 2b       	or	r24, r27
 216:	89 f4       	brne	.+34     	; 0x23a <__vector_13+0x92>
 218:	bc df       	rcall	.-136    	; 0x192 <TimerISR>
 21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 21e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 222:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 226:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 22a:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <_avr_timer_cntcurr>
 22e:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <_avr_timer_cntcurr+0x1>
 232:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <_avr_timer_cntcurr+0x2>
 236:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <_avr_timer_cntcurr+0x3>
 23a:	00 00       	nop
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 25e:	0f 90       	pop	r0
 260:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <findGCD>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	2c 97       	sbiw	r28, 0x0c	; 12
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	6d 83       	std	Y+5, r22	; 0x05
 280:	7e 83       	std	Y+6, r23	; 0x06
 282:	8f 83       	std	Y+7, r24	; 0x07
 284:	98 87       	std	Y+8, r25	; 0x08
 286:	29 87       	std	Y+9, r18	; 0x09
 288:	3a 87       	std	Y+10, r19	; 0x0a
 28a:	4b 87       	std	Y+11, r20	; 0x0b
 28c:	5c 87       	std	Y+12, r21	; 0x0c
 28e:	8d 81       	ldd	r24, Y+5	; 0x05
 290:	9e 81       	ldd	r25, Y+6	; 0x06
 292:	af 81       	ldd	r26, Y+7	; 0x07
 294:	b8 85       	ldd	r27, Y+8	; 0x08
 296:	29 85       	ldd	r18, Y+9	; 0x09
 298:	3a 85       	ldd	r19, Y+10	; 0x0a
 29a:	4b 85       	ldd	r20, Y+11	; 0x0b
 29c:	5c 85       	ldd	r21, Y+12	; 0x0c
 29e:	bc 01       	movw	r22, r24
 2a0:	cd 01       	movw	r24, r26
 2a2:	d2 d4       	rcall	.+2468   	; 0xc48 <__udivmodsi4>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	89 83       	std	Y+1, r24	; 0x01
 2aa:	9a 83       	std	Y+2, r25	; 0x02
 2ac:	ab 83       	std	Y+3, r26	; 0x03
 2ae:	bc 83       	std	Y+4, r27	; 0x04
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	9a 81       	ldd	r25, Y+2	; 0x02
 2b4:	ab 81       	ldd	r26, Y+3	; 0x03
 2b6:	bc 81       	ldd	r27, Y+4	; 0x04
 2b8:	89 2b       	or	r24, r25
 2ba:	8a 2b       	or	r24, r26
 2bc:	8b 2b       	or	r24, r27
 2be:	29 f4       	brne	.+10     	; 0x2ca <findGCD+0x60>
 2c0:	89 85       	ldd	r24, Y+9	; 0x09
 2c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 2c4:	ab 85       	ldd	r26, Y+11	; 0x0b
 2c6:	bc 85       	ldd	r27, Y+12	; 0x0c
 2c8:	11 c0       	rjmp	.+34     	; 0x2ec <findGCD+0x82>
 2ca:	89 85       	ldd	r24, Y+9	; 0x09
 2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ce:	ab 85       	ldd	r26, Y+11	; 0x0b
 2d0:	bc 85       	ldd	r27, Y+12	; 0x0c
 2d2:	8d 83       	std	Y+5, r24	; 0x05
 2d4:	9e 83       	std	Y+6, r25	; 0x06
 2d6:	af 83       	std	Y+7, r26	; 0x07
 2d8:	b8 87       	std	Y+8, r27	; 0x08
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
 2de:	ab 81       	ldd	r26, Y+3	; 0x03
 2e0:	bc 81       	ldd	r27, Y+4	; 0x04
 2e2:	89 87       	std	Y+9, r24	; 0x09
 2e4:	9a 87       	std	Y+10, r25	; 0x0a
 2e6:	ab 87       	std	Y+11, r26	; 0x0b
 2e8:	bc 87       	std	Y+12, r27	; 0x0c
 2ea:	d1 cf       	rjmp	.-94     	; 0x28e <findGCD+0x24>
 2ec:	bc 01       	movw	r22, r24
 2ee:	cd 01       	movw	r24, r26
 2f0:	2c 96       	adiw	r28, 0x0c	; 12
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <LCD_ClearScreen>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	1a d0       	rcall	.+52     	; 0x342 <LCD_WriteCommand>
 30e:	00 00       	nop
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <LCD_init>:
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	84 e6       	ldi	r24, 0x64	; 100
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	ac d0       	rcall	.+344    	; 0x47c <delay_ms>
 324:	88 e3       	ldi	r24, 0x38	; 56
 326:	0d d0       	rcall	.+26     	; 0x342 <LCD_WriteCommand>
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	0b d0       	rcall	.+22     	; 0x342 <LCD_WriteCommand>
 32c:	8f e0       	ldi	r24, 0x0F	; 15
 32e:	09 d0       	rcall	.+18     	; 0x342 <LCD_WriteCommand>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	07 d0       	rcall	.+14     	; 0x342 <LCD_WriteCommand>
 334:	8a e0       	ldi	r24, 0x0A	; 10
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	a1 d0       	rcall	.+322    	; 0x47c <delay_ms>
 33a:	00 00       	nop
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <LCD_WriteCommand>:
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	1f 92       	push	r1
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	89 83       	std	Y+1, r24	; 0x01
 34e:	88 e2       	ldi	r24, 0x28	; 40
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	28 e2       	ldi	r18, 0x28	; 40
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	f9 01       	movw	r30, r18
 358:	20 81       	ld	r18, Z
 35a:	2f 77       	andi	r18, 0x7F	; 127
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
 360:	8b e2       	ldi	r24, 0x2B	; 43
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	29 81       	ldd	r18, Y+1	; 0x01
 366:	fc 01       	movw	r30, r24
 368:	20 83       	st	Z, r18
 36a:	88 e2       	ldi	r24, 0x28	; 40
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	28 e2       	ldi	r18, 0x28	; 40
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	f9 01       	movw	r30, r18
 374:	20 81       	ld	r18, Z
 376:	20 64       	ori	r18, 0x40	; 64
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
 37c:	00 00       	nop
 37e:	88 e2       	ldi	r24, 0x28	; 40
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	28 e2       	ldi	r18, 0x28	; 40
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	f9 01       	movw	r30, r18
 388:	20 81       	ld	r18, Z
 38a:	2f 7b       	andi	r18, 0xBF	; 191
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	73 d0       	rcall	.+230    	; 0x47c <delay_ms>
 396:	00 00       	nop
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <LCD_WriteData>:
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	1f 92       	push	r1
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	89 83       	std	Y+1, r24	; 0x01
 3ac:	88 e2       	ldi	r24, 0x28	; 40
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	28 e2       	ldi	r18, 0x28	; 40
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	20 68       	ori	r18, 0x80	; 128
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
 3be:	8b e2       	ldi	r24, 0x2B	; 43
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	29 81       	ldd	r18, Y+1	; 0x01
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18
 3c8:	88 e2       	ldi	r24, 0x28	; 40
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	28 e2       	ldi	r18, 0x28	; 40
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	f9 01       	movw	r30, r18
 3d2:	20 81       	ld	r18, Z
 3d4:	20 64       	ori	r18, 0x40	; 64
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
 3da:	00 00       	nop
 3dc:	88 e2       	ldi	r24, 0x28	; 40
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	28 e2       	ldi	r18, 0x28	; 40
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	f9 01       	movw	r30, r18
 3e6:	20 81       	ld	r18, Z
 3e8:	2f 7b       	andi	r18, 0xBF	; 191
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	44 d0       	rcall	.+136    	; 0x47c <delay_ms>
 3f4:	00 00       	nop
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <LCD_DisplayString>:
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 d0       	rcall	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	8a 83       	std	Y+2, r24	; 0x02
 40c:	7c 83       	std	Y+4, r23	; 0x04
 40e:	6b 83       	std	Y+3, r22	; 0x03
 410:	78 df       	rcall	.-272    	; 0x302 <LCD_ClearScreen>
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	0f c0       	rjmp	.+30     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	98 0f       	add	r25, r24
 41e:	99 83       	std	Y+1, r25	; 0x01
 420:	18 d0       	rcall	.+48     	; 0x452 <LCD_Cursor>
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	9c 81       	ldd	r25, Y+4	; 0x04
 426:	9c 01       	movw	r18, r24
 428:	2f 5f       	subi	r18, 0xFF	; 255
 42a:	3f 4f       	sbci	r19, 0xFF	; 255
 42c:	3c 83       	std	Y+4, r19	; 0x04
 42e:	2b 83       	std	Y+3, r18	; 0x03
 430:	fc 01       	movw	r30, r24
 432:	80 81       	ld	r24, Z
 434:	b5 df       	rcall	.-150    	; 0x3a0 <LCD_WriteData>
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	9c 81       	ldd	r25, Y+4	; 0x04
 43a:	fc 01       	movw	r30, r24
 43c:	80 81       	ld	r24, Z
 43e:	88 23       	and	r24, r24
 440:	59 f7       	brne	.-42     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 442:	00 00       	nop
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <LCD_Cursor>:
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	1f 92       	push	r1
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	89 83       	std	Y+1, r24	; 0x01
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	81 31       	cpi	r24, 0x11	; 17
 462:	20 f4       	brcc	.+8      	; 0x46c <LCD_Cursor+0x1a>
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	81 58       	subi	r24, 0x81	; 129
 468:	6c df       	rcall	.-296    	; 0x342 <LCD_WriteCommand>
 46a:	03 c0       	rjmp	.+6      	; 0x472 <LCD_Cursor+0x20>
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	81 55       	subi	r24, 0x51	; 81
 470:	68 df       	rcall	.-304    	; 0x342 <LCD_WriteCommand>
 472:	00 00       	nop
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <delay_ms>:
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	00 d0       	rcall	.+0      	; 0x482 <delay_ms+0x6>
 482:	00 d0       	rcall	.+0      	; 0x484 <delay_ms+0x8>
 484:	00 d0       	rcall	.+0      	; 0x486 <delay_ms+0xa>
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	9e 83       	std	Y+6, r25	; 0x06
 48c:	8d 83       	std	Y+5, r24	; 0x05
 48e:	1a 82       	std	Y+2, r1	; 0x02
 490:	19 82       	std	Y+1, r1	; 0x01
 492:	13 c0       	rjmp	.+38     	; 0x4ba <delay_ms+0x3e>
 494:	1c 82       	std	Y+4, r1	; 0x04
 496:	1b 82       	std	Y+3, r1	; 0x03
 498:	06 c0       	rjmp	.+12     	; 0x4a6 <delay_ms+0x2a>
 49a:	00 00       	nop
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	9c 81       	ldd	r25, Y+4	; 0x04
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	9c 83       	std	Y+4, r25	; 0x04
 4a4:	8b 83       	std	Y+3, r24	; 0x03
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	9c 81       	ldd	r25, Y+4	; 0x04
 4aa:	87 30       	cpi	r24, 0x07	; 7
 4ac:	93 40       	sbci	r25, 0x03	; 3
 4ae:	ac f3       	brlt	.-22     	; 0x49a <delay_ms+0x1e>
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	9a 81       	ldd	r25, Y+2	; 0x02
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	9a 83       	std	Y+2, r25	; 0x02
 4b8:	89 83       	std	Y+1, r24	; 0x01
 4ba:	29 81       	ldd	r18, Y+1	; 0x01
 4bc:	3a 81       	ldd	r19, Y+2	; 0x02
 4be:	8d 81       	ldd	r24, Y+5	; 0x05
 4c0:	9e 81       	ldd	r25, Y+6	; 0x06
 4c2:	28 17       	cp	r18, r24
 4c4:	39 07       	cpc	r19, r25
 4c6:	34 f3       	brlt	.-52     	; 0x494 <delay_ms+0x18>
 4c8:	00 00       	nop
 4ca:	26 96       	adiw	r28, 0x06	; 6
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <matrix_display>:
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	00 d0       	rcall	.+0      	; 0x4e2 <matrix_display+0x6>
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	89 83       	std	Y+1, r24	; 0x01
 4e8:	6a 83       	std	Y+2, r22	; 0x02
 4ea:	82 e2       	ldi	r24, 0x22	; 34
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	29 81       	ldd	r18, Y+1	; 0x01
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
 4f4:	85 e2       	ldi	r24, 0x25	; 37
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	2a 81       	ldd	r18, Y+2	; 0x02
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18
 4fe:	00 00       	nop
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <p1_paddle_Tick>:
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	00 d0       	rcall	.+0      	; 0x510 <p1_paddle_Tick+0x6>
 510:	00 d0       	rcall	.+0      	; 0x512 <p1_paddle_Tick+0x8>
 512:	00 d0       	rcall	.+0      	; 0x514 <p1_paddle_Tick+0xa>
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	9e 83       	std	Y+6, r25	; 0x06
 51a:	8d 83       	std	Y+5, r24	; 0x05
 51c:	86 e2       	ldi	r24, 0x26	; 38
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	fc 01       	movw	r30, r24
 522:	80 81       	ld	r24, Z
 524:	80 95       	com	r24
 526:	82 70       	andi	r24, 0x02	; 2
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	86 e2       	ldi	r24, 0x26	; 38
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	fc 01       	movw	r30, r24
 530:	80 81       	ld	r24, Z
 532:	80 95       	com	r24
 534:	84 70       	andi	r24, 0x04	; 4
 536:	8a 83       	std	Y+2, r24	; 0x02
 538:	87 e0       	ldi	r24, 0x07	; 7
 53a:	8b 83       	std	Y+3, r24	; 0x03
 53c:	80 ee       	ldi	r24, 0xE0	; 224
 53e:	8c 83       	std	Y+4, r24	; 0x04
 540:	8d 81       	ldd	r24, Y+5	; 0x05
 542:	9e 81       	ldd	r25, Y+6	; 0x06
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	91 05       	cpc	r25, r1
 548:	f9 f0       	breq	.+62     	; 0x588 <p1_paddle_Tick+0x7e>
 54a:	82 30       	cpi	r24, 0x02	; 2
 54c:	91 05       	cpc	r25, r1
 54e:	1c f4       	brge	.+6      	; 0x556 <p1_paddle_Tick+0x4c>
 550:	89 2b       	or	r24, r25
 552:	39 f0       	breq	.+14     	; 0x562 <p1_paddle_Tick+0x58>
 554:	35 c0       	rjmp	.+106    	; 0x5c0 <p1_paddle_Tick+0xb6>
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	91 05       	cpc	r25, r1
 55a:	29 f1       	breq	.+74     	; 0x5a6 <p1_paddle_Tick+0x9c>
 55c:	04 97       	sbiw	r24, 0x04	; 4
 55e:	59 f1       	breq	.+86     	; 0x5b6 <p1_paddle_Tick+0xac>
 560:	2f c0       	rjmp	.+94     	; 0x5c0 <p1_paddle_Tick+0xb6>
 562:	89 81       	ldd	r24, Y+1	; 0x01
 564:	88 23       	and	r24, r24
 566:	29 f0       	breq	.+10     	; 0x572 <p1_paddle_Tick+0x68>
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	9e 83       	std	Y+6, r25	; 0x06
 56e:	8d 83       	std	Y+5, r24	; 0x05
 570:	2f c0       	rjmp	.+94     	; 0x5d0 <p1_paddle_Tick+0xc6>
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	88 23       	and	r24, r24
 576:	29 f0       	breq	.+10     	; 0x582 <p1_paddle_Tick+0x78>
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	9e 83       	std	Y+6, r25	; 0x06
 57e:	8d 83       	std	Y+5, r24	; 0x05
 580:	27 c0       	rjmp	.+78     	; 0x5d0 <p1_paddle_Tick+0xc6>
 582:	1e 82       	std	Y+6, r1	; 0x06
 584:	1d 82       	std	Y+5, r1	; 0x05
 586:	24 c0       	rjmp	.+72     	; 0x5d0 <p1_paddle_Tick+0xc6>
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	88 23       	and	r24, r24
 58c:	21 f4       	brne	.+8      	; 0x596 <p1_paddle_Tick+0x8c>
 58e:	84 e0       	ldi	r24, 0x04	; 4
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	9e 83       	std	Y+6, r25	; 0x06
 594:	8d 83       	std	Y+5, r24	; 0x05
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	88 23       	and	r24, r24
 59a:	b9 f0       	breq	.+46     	; 0x5ca <p1_paddle_Tick+0xc0>
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	9e 83       	std	Y+6, r25	; 0x06
 5a2:	8d 83       	std	Y+5, r24	; 0x05
 5a4:	12 c0       	rjmp	.+36     	; 0x5ca <p1_paddle_Tick+0xc0>
 5a6:	8a 81       	ldd	r24, Y+2	; 0x02
 5a8:	88 23       	and	r24, r24
 5aa:	89 f4       	brne	.+34     	; 0x5ce <p1_paddle_Tick+0xc4>
 5ac:	84 e0       	ldi	r24, 0x04	; 4
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	9e 83       	std	Y+6, r25	; 0x06
 5b2:	8d 83       	std	Y+5, r24	; 0x05
 5b4:	0c c0       	rjmp	.+24     	; 0x5ce <p1_paddle_Tick+0xc4>
 5b6:	84 e0       	ldi	r24, 0x04	; 4
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	9e 83       	std	Y+6, r25	; 0x06
 5bc:	8d 83       	std	Y+5, r24	; 0x05
 5be:	08 c0       	rjmp	.+16     	; 0x5d0 <p1_paddle_Tick+0xc6>
 5c0:	84 e0       	ldi	r24, 0x04	; 4
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	9e 83       	std	Y+6, r25	; 0x06
 5c6:	8d 83       	std	Y+5, r24	; 0x05
 5c8:	03 c0       	rjmp	.+6      	; 0x5d0 <p1_paddle_Tick+0xc6>
 5ca:	00 00       	nop
 5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <p1_paddle_Tick+0xc6>
 5ce:	00 00       	nop
 5d0:	8d 81       	ldd	r24, Y+5	; 0x05
 5d2:	9e 81       	ldd	r25, Y+6	; 0x06
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	91 05       	cpc	r25, r1
 5d8:	a9 f0       	breq	.+42     	; 0x604 <p1_paddle_Tick+0xfa>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	91 05       	cpc	r25, r1
 5de:	1c f4       	brge	.+6      	; 0x5e6 <p1_paddle_Tick+0xdc>
 5e0:	89 2b       	or	r24, r25
 5e2:	39 f0       	breq	.+14     	; 0x5f2 <p1_paddle_Tick+0xe8>
 5e4:	3e c0       	rjmp	.+124    	; 0x662 <p1_paddle_Tick+0x158>
 5e6:	83 30       	cpi	r24, 0x03	; 3
 5e8:	91 05       	cpc	r25, r1
 5ea:	f9 f0       	breq	.+62     	; 0x62a <p1_paddle_Tick+0x120>
 5ec:	04 97       	sbiw	r24, 0x04	; 4
 5ee:	81 f1       	breq	.+96     	; 0x650 <p1_paddle_Tick+0x146>
 5f0:	38 c0       	rjmp	.+112    	; 0x662 <p1_paddle_Tick+0x158>
 5f2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <try_turn_on.2099>
 5f6:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <try_turn_on.2099>
 5fa:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <try_column_num.2100>
 5fe:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <try_column_num.2100>
 602:	2f c0       	rjmp	.+94     	; 0x662 <p1_paddle_Tick+0x158>
 604:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <try_turn_on.2099>
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	89 17       	cp	r24, r25
 60c:	28 f4       	brcc	.+10     	; 0x618 <p1_paddle_Tick+0x10e>
 60e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <try_turn_on.2099>
 612:	86 95       	lsr	r24
 614:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <try_turn_on.2099>
 618:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <try_turn_on.2099>
 61c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <try_turn_on.2099>
 620:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <try_column_num.2100>
 624:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <try_column_num.2100>
 628:	1c c0       	rjmp	.+56     	; 0x662 <p1_paddle_Tick+0x158>
 62a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <try_turn_on.2099>
 62e:	8c 81       	ldd	r24, Y+4	; 0x04
 630:	98 17       	cp	r25, r24
 632:	28 f4       	brcc	.+10     	; 0x63e <p1_paddle_Tick+0x134>
 634:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <try_turn_on.2099>
 638:	88 0f       	add	r24, r24
 63a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <try_turn_on.2099>
 63e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <try_turn_on.2099>
 642:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <try_turn_on.2099>
 646:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <try_column_num.2100>
 64a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <try_column_num.2100>
 64e:	09 c0       	rjmp	.+18     	; 0x662 <p1_paddle_Tick+0x158>
 650:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <try_turn_on.2099>
 654:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <try_turn_on.2099>
 658:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <try_column_num.2100>
 65c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <try_column_num.2100>
 660:	00 00       	nop
 662:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <try_column_num.2100>
 666:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <try_turn_on.2099>
 66a:	69 2f       	mov	r22, r25
 66c:	37 df       	rcall	.-402    	; 0x4dc <matrix_display>
 66e:	8d 81       	ldd	r24, Y+5	; 0x05
 670:	9e 81       	ldd	r25, Y+6	; 0x06
 672:	26 96       	adiw	r28, 0x06	; 6
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	f8 94       	cli
 678:	de bf       	out	0x3e, r29	; 62
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	cd bf       	out	0x3d, r28	; 61
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	08 95       	ret

00000684 <menu_str_tick>:
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	00 d0       	rcall	.+0      	; 0x68a <menu_str_tick+0x6>
 68a:	00 d0       	rcall	.+0      	; 0x68c <menu_str_tick+0x8>
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
 690:	9c 83       	std	Y+4, r25	; 0x04
 692:	8b 83       	std	Y+3, r24	; 0x03
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	9c 81       	ldd	r25, Y+4	; 0x04
 698:	89 2b       	or	r24, r25
 69a:	79 f5       	brne	.+94     	; 0x6fa <menu_str_tick+0x76>
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	9a 83       	std	Y+2, r25	; 0x02
 6a2:	89 83       	std	Y+1, r24	; 0x01
 6a4:	21 c0       	rjmp	.+66     	; 0x6e8 <menu_str_tick+0x64>
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	d4 de       	rcall	.-600    	; 0x452 <LCD_Cursor>
 6aa:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <m_cnt>
 6ae:	28 2f       	mov	r18, r24
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
 6b4:	9a 81       	ldd	r25, Y+2	; 0x02
 6b6:	82 0f       	add	r24, r18
 6b8:	93 1f       	adc	r25, r19
 6ba:	02 97       	sbiw	r24, 0x02	; 2
 6bc:	8c 5f       	subi	r24, 0xFC	; 252
 6be:	9e 4f       	sbci	r25, 0xFE	; 254
 6c0:	fc 01       	movw	r30, r24
 6c2:	80 81       	ld	r24, Z
 6c4:	6d de       	rcall	.-806    	; 0x3a0 <LCD_WriteData>
 6c6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <m_cnt>
 6ca:	28 2f       	mov	r18, r24
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	89 81       	ldd	r24, Y+1	; 0x01
 6d0:	9a 81       	ldd	r25, Y+2	; 0x02
 6d2:	82 0f       	add	r24, r18
 6d4:	93 1f       	adc	r25, r19
 6d6:	89 97       	sbiw	r24, 0x29	; 41
 6d8:	11 f4       	brne	.+4      	; 0x6de <menu_str_tick+0x5a>
 6da:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <m_cnt>
 6de:	89 81       	ldd	r24, Y+1	; 0x01
 6e0:	9a 81       	ldd	r25, Y+2	; 0x02
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	9a 83       	std	Y+2, r25	; 0x02
 6e6:	89 83       	std	Y+1, r24	; 0x01
 6e8:	89 81       	ldd	r24, Y+1	; 0x01
 6ea:	9a 81       	ldd	r25, Y+2	; 0x02
 6ec:	41 97       	sbiw	r24, 0x11	; 17
 6ee:	d8 f2       	brcs	.-74     	; 0x6a6 <menu_str_tick+0x22>
 6f0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <m_cnt>
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <m_cnt>
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	9c 81       	ldd	r25, Y+4	; 0x04
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	0f 90       	pop	r0
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <player_str_tick>:
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	00 d0       	rcall	.+0      	; 0x712 <player_str_tick+0x6>
 712:	00 d0       	rcall	.+0      	; 0x714 <player_str_tick+0x8>
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	9c 83       	std	Y+4, r25	; 0x04
 71a:	8b 83       	std	Y+3, r24	; 0x03
 71c:	8b 81       	ldd	r24, Y+3	; 0x03
 71e:	9c 81       	ldd	r25, Y+4	; 0x04
 720:	89 2b       	or	r24, r25
 722:	79 f5       	brne	.+94     	; 0x782 <player_str_tick+0x76>
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	9a 83       	std	Y+2, r25	; 0x02
 72a:	89 83       	std	Y+1, r24	; 0x01
 72c:	21 c0       	rjmp	.+66     	; 0x770 <player_str_tick+0x64>
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	90 de       	rcall	.-736    	; 0x452 <LCD_Cursor>
 732:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <p_cnt>
 736:	28 2f       	mov	r18, r24
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	89 81       	ldd	r24, Y+1	; 0x01
 73c:	9a 81       	ldd	r25, Y+2	; 0x02
 73e:	82 0f       	add	r24, r18
 740:	93 1f       	adc	r25, r19
 742:	02 97       	sbiw	r24, 0x02	; 2
 744:	84 5d       	subi	r24, 0xD4	; 212
 746:	9e 4f       	sbci	r25, 0xFE	; 254
 748:	fc 01       	movw	r30, r24
 74a:	80 81       	ld	r24, Z
 74c:	29 de       	rcall	.-942    	; 0x3a0 <LCD_WriteData>
 74e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <p_cnt>
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	89 81       	ldd	r24, Y+1	; 0x01
 758:	9a 81       	ldd	r25, Y+2	; 0x02
 75a:	82 0f       	add	r24, r18
 75c:	93 1f       	adc	r25, r19
 75e:	c9 97       	sbiw	r24, 0x39	; 57
 760:	11 f4       	brne	.+4      	; 0x766 <player_str_tick+0x5a>
 762:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <p_cnt>
 766:	89 81       	ldd	r24, Y+1	; 0x01
 768:	9a 81       	ldd	r25, Y+2	; 0x02
 76a:	01 96       	adiw	r24, 0x01	; 1
 76c:	9a 83       	std	Y+2, r25	; 0x02
 76e:	89 83       	std	Y+1, r24	; 0x01
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	9a 81       	ldd	r25, Y+2	; 0x02
 774:	41 97       	sbiw	r24, 0x11	; 17
 776:	d8 f2       	brcs	.-74     	; 0x72e <player_str_tick+0x22>
 778:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <p_cnt>
 77c:	8f 5f       	subi	r24, 0xFF	; 255
 77e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <p_cnt>
 782:	8b 81       	ldd	r24, Y+3	; 0x03
 784:	9c 81       	ldd	r25, Y+4	; 0x04
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <Menu_tick>:
	
enum Menu_States{MENU_MAIN, MENU_Press, MENU_PLAYERS, MENU_READY } menu_state;
void Menu_tick() {
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	00 d0       	rcall	.+0      	; 0x79a <Menu_tick+0x6>
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
	uc start_button = ~PINC & 0x01; //Start = C0
 79e:	86 e2       	ldi	r24, 0x26	; 38
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	fc 01       	movw	r30, r24
 7a4:	80 81       	ld	r24, Z
 7a6:	88 2f       	mov	r24, r24
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	81 70       	andi	r24, 0x01	; 1
 7ac:	99 27       	eor	r25, r25
 7ae:	21 e0       	ldi	r18, 0x01	; 1
 7b0:	89 2b       	or	r24, r25
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <Menu_tick+0x22>
 7b4:	20 e0       	ldi	r18, 0x00	; 0
 7b6:	29 83       	std	Y+1, r18	; 0x01
	uc set_ready1 = 0;
 7b8:	1a 82       	std	Y+2, r1	; 0x02
	switch(menu_state) 
 7ba:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <menu_state>
 7be:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <menu_state+0x1>
 7c2:	81 30       	cpi	r24, 0x01	; 1
 7c4:	91 05       	cpc	r25, r1
 7c6:	d1 f0       	breq	.+52     	; 0x7fc <Menu_tick+0x68>
 7c8:	81 30       	cpi	r24, 0x01	; 1
 7ca:	91 05       	cpc	r25, r1
 7cc:	30 f0       	brcs	.+12     	; 0x7da <Menu_tick+0x46>
 7ce:	82 30       	cpi	r24, 0x02	; 2
 7d0:	91 05       	cpc	r25, r1
 7d2:	39 f1       	breq	.+78     	; 0x822 <Menu_tick+0x8e>
 7d4:	03 97       	sbiw	r24, 0x03	; 3
 7d6:	a9 f1       	breq	.+106    	; 0x842 <Menu_tick+0xae>
			}
			else{menu_state = MENU_PLAYERS;}
		case MENU_READY:
			break;
		default:
		break;
 7d8:	39 c0       	rjmp	.+114    	; 0x84c <Menu_tick+0xb8>
	uc start_button = ~PINC & 0x01; //Start = C0
	uc set_ready1 = 0;
	switch(menu_state) 
	{//Transitions
		case MENU_MAIN:
			if(!start_button){
 7da:	89 81       	ldd	r24, Y+1	; 0x01
 7dc:	88 23       	and	r24, r24
 7de:	21 f4       	brne	.+8      	; 0x7e8 <Menu_tick+0x54>
				menu_state = MENU_MAIN;
 7e0:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <menu_state+0x1>
 7e4:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <menu_state>
			}
			if(start_button){
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	88 23       	and	r24, r24
 7ec:	61 f1       	breq	.+88     	; 0x846 <Menu_tick+0xb2>
				menu_state = MENU_Press;
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <menu_state+0x1>
 7f6:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <menu_state>
			}
		break;
 7fa:	25 c0       	rjmp	.+74     	; 0x846 <Menu_tick+0xb2>
		case MENU_Press:
			if (!start_button)
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	88 23       	and	r24, r24
 800:	31 f4       	brne	.+12     	; 0x80e <Menu_tick+0x7a>
			{
				menu_state = MENU_PLAYERS;
 802:	82 e0       	ldi	r24, 0x02	; 2
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <menu_state+0x1>
 80a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <menu_state>
			}
			if (start_button)
 80e:	89 81       	ldd	r24, Y+1	; 0x01
 810:	88 23       	and	r24, r24
 812:	d9 f0       	breq	.+54     	; 0x84a <Menu_tick+0xb6>
			{
				menu_state = MENU_Press;
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <menu_state+0x1>
 81c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <menu_state>
			}
		break;
 820:	14 c0       	rjmp	.+40     	; 0x84a <Menu_tick+0xb6>
		case MENU_PLAYERS:
			if (start_button)
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	88 23       	and	r24, r24
 826:	39 f0       	breq	.+14     	; 0x836 <Menu_tick+0xa2>
			{
				menu_state = MENU_READY;
 828:	83 e0       	ldi	r24, 0x03	; 3
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <menu_state+0x1>
 830:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <menu_state>
			}
			else{menu_state = MENU_PLAYERS;}
		case MENU_READY:
			break;
 834:	06 c0       	rjmp	.+12     	; 0x842 <Menu_tick+0xae>
		case MENU_PLAYERS:
			if (start_button)
			{
				menu_state = MENU_READY;
			}
			else{menu_state = MENU_PLAYERS;}
 836:	82 e0       	ldi	r24, 0x02	; 2
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <menu_state+0x1>
 83e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <menu_state>
		case MENU_READY:
			break;
 842:	00 00       	nop
 844:	03 c0       	rjmp	.+6      	; 0x84c <Menu_tick+0xb8>
				menu_state = MENU_MAIN;
			}
			if(start_button){
				menu_state = MENU_Press;
			}
		break;
 846:	00 00       	nop
 848:	01 c0       	rjmp	.+2      	; 0x84c <Menu_tick+0xb8>
			}
			if (start_button)
			{
				menu_state = MENU_Press;
			}
		break;
 84a:	00 00       	nop
		case MENU_READY:
			break;
		default:
		break;
	}
	switch(menu_state)
 84c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <menu_state>
 850:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <menu_state+0x1>
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	91 05       	cpc	r25, r1
 858:	09 f1       	breq	.+66     	; 0x89c <Menu_tick+0x108>
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	91 05       	cpc	r25, r1
 85e:	30 f0       	brcs	.+12     	; 0x86c <Menu_tick+0xd8>
 860:	82 30       	cpi	r24, 0x02	; 2
 862:	91 05       	cpc	r25, r1
 864:	39 f0       	breq	.+14     	; 0x874 <Menu_tick+0xe0>
 866:	03 97       	sbiw	r24, 0x03	; 3
 868:	49 f0       	breq	.+18     	; 0x87c <Menu_tick+0xe8>
				if (ready = 1){
					LCD_DisplayString(1,"Ready!");
				}
			}
		default:
		break;
 86a:	1a c0       	rjmp	.+52     	; 0x8a0 <Menu_tick+0x10c>
		break;
	}
	switch(menu_state)
	{//State Actions
		case MENU_MAIN:
			menu_str_tick(m_init);
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	09 df       	rcall	.-494    	; 0x684 <menu_str_tick>
			//question_mark_tick();
		break;
 872:	17 c0       	rjmp	.+46     	; 0x8a2 <Menu_tick+0x10e>
		case MENU_Press:
		break;
		case MENU_PLAYERS:
			player_str_tick(p_init);
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	49 df       	rcall	.-366    	; 0x70c <player_str_tick>
			//question_mark_tick();
			break;
 87a:	13 c0       	rjmp	.+38     	; 0x8a2 <Menu_tick+0x10e>
		case MENU_READY:
			if(!start_button){
 87c:	89 81       	ldd	r24, Y+1	; 0x01
 87e:	88 23       	and	r24, r24
 880:	79 f4       	brne	.+30     	; 0x8a0 <Menu_tick+0x10c>
				set_ready1 =1;
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	8a 83       	std	Y+2, r24	; 0x02
				//LCD_DisplayString(1,"All players ready"); //Print to know in this state
				ready = set_ready1;
 886:	8a 81       	ldd	r24, Y+2	; 0x02
 888:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <ready>
				if (ready = 1){
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <ready>
					LCD_DisplayString(1,"Ready!");
 892:	67 e6       	ldi	r22, 0x67	; 103
 894:	71 e0       	ldi	r23, 0x01	; 1
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	b2 dd       	rcall	.-1180   	; 0x3fe <LCD_DisplayString>
				}
			}
		default:
		break;
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <Menu_tick+0x10c>
		case MENU_MAIN:
			menu_str_tick(m_init);
			//question_mark_tick();
		break;
		case MENU_Press:
		break;
 89c:	00 00       	nop
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <Menu_tick+0x10e>
				if (ready = 1){
					LCD_DisplayString(1,"Ready!");
				}
			}
		default:
		break;
 8a0:	00 00       	nop
	}
	
	
}
 8a2:	00 00       	nop
 8a4:	0f 90       	pop	r0
 8a6:	0f 90       	pop	r0
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	08 95       	ret

000008ae <Player1_tick>:

//Player1 State Machine
enum Player1_States{P1_START, P1_SHOW_PADDLE} p1_state;
void Player1_tick(){
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
	
	switch(p1_state)
 8b6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <p1_state>
 8ba:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <p1_state+0x1>
 8be:	89 2b       	or	r24, r25
 8c0:	81 f4       	brne	.+32     	; 0x8e2 <Player1_tick+0x34>
	{//State Transitions 
		case P1_START:
			if (ready==1)
 8c2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ready>
 8c6:	81 30       	cpi	r24, 0x01	; 1
 8c8:	39 f4       	brne	.+14     	; 0x8d8 <Player1_tick+0x2a>
			{
				p1_state = P1_SHOW_PADDLE;
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <p1_state+0x1>
 8d2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <p1_state>
				break;
 8d6:	05 c0       	rjmp	.+10     	; 0x8e2 <Player1_tick+0x34>
			}
			p1_state = P1_START;
 8d8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <p1_state+0x1>
 8dc:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <p1_state>
			break;
 8e0:	00 00       	nop
				//will handle later
			}
			break;	
	}
	
	switch (p1_state)
 8e2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <p1_state>
 8e6:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <p1_state+0x1>
 8ea:	00 97       	sbiw	r24, 0x00	; 0
 8ec:	39 f0       	breq	.+14     	; 0x8fc <Player1_tick+0x4e>
 8ee:	01 97       	sbiw	r24, 0x01	; 1
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <Player1_tick+0x46>
			p1_paddle_Tick(P1_START);		
			//Will display 3 light paddle on left side of screen
			break;
	}
	
}
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <Player1_tick+0x50>
			break;
		case P1_SHOW_PADDLE:
			//Working on logic to call tick function to display paddle 1	
			//LCD_DisplayString(1, "P1:");		
			///p1_paddle_Tick();	
			p1_paddle_Tick(P1_START);		
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	08 de       	rcall	.-1008   	; 0x50a <p1_paddle_Tick>
			//Will display 3 light paddle on left side of screen
			break;
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <Player1_tick+0x50>
	}
	
	switch (p1_state)
	{//State Actions
		case P1_START:
			break;
 8fc:	00 00       	nop
			p1_paddle_Tick(P1_START);		
			//Will display 3 light paddle on left side of screen
			break;
	}
	
}
 8fe:	00 00       	nop
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	08 95       	ret

00000906 <main>:

int main(void)
{
 906:	0f 93       	push	r16
 908:	1f 93       	push	r17
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
 912:	a8 97       	sbiw	r28, 0x28	; 40
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	f8 94       	cli
 918:	de bf       	out	0x3e, r29	; 62
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 91e:	84 e2       	ldi	r24, 0x24	; 36
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	2f ef       	ldi	r18, 0xFF	; 255
 924:	fc 01       	movw	r30, r24
 926:	20 83       	st	Z, r18
 928:	85 e2       	ldi	r24, 0x25	; 37
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	fc 01       	movw	r30, r24
 92e:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 930:	87 e2       	ldi	r24, 0x27	; 39
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	20 ef       	ldi	r18, 0xF0	; 240
 936:	fc 01       	movw	r30, r24
 938:	20 83       	st	Z, r18
 93a:	88 e2       	ldi	r24, 0x28	; 40
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	2f e0       	ldi	r18, 0x0F	; 15
 940:	fc 01       	movw	r30, r24
 942:	20 83       	st	Z, r18
	DDRA = 0xFF; PORTA = 0x00; //outputs
 944:	81 e2       	ldi	r24, 0x21	; 33
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	2f ef       	ldi	r18, 0xFF	; 255
 94a:	fc 01       	movw	r30, r24
 94c:	20 83       	st	Z, r18
 94e:	82 e2       	ldi	r24, 0x22	; 34
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	fc 01       	movw	r30, r24
 954:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;
 956:	8a e2       	ldi	r24, 0x2A	; 42
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	2f ef       	ldi	r18, 0xFF	; 255
 95c:	fc 01       	movw	r30, r24
 95e:	20 83       	st	Z, r18
 960:	8b e2       	ldi	r24, 0x2B	; 43
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	fc 01       	movw	r30, r24
 966:	10 82       	st	Z, r1
	
	
	//Period for the tasks
	unsigned long int Menu_calc = 200;
 968:	88 ec       	ldi	r24, 0xC8	; 200
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	a0 e0       	ldi	r26, 0x00	; 0
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	8b 83       	std	Y+3, r24	; 0x03
 972:	9c 83       	std	Y+4, r25	; 0x04
 974:	ad 83       	std	Y+5, r26	; 0x05
 976:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int Player1_calc = 200;
 978:	88 ec       	ldi	r24, 0xC8	; 200
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	a0 e0       	ldi	r26, 0x00	; 0
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	8f 83       	std	Y+7, r24	; 0x07
 982:	98 87       	std	Y+8, r25	; 0x08
 984:	a9 87       	std	Y+9, r26	; 0x09
 986:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int LCD_calc = 20;
 988:	84 e1       	ldi	r24, 0x14	; 20
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	a0 e0       	ldi	r26, 0x00	; 0
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	8b 87       	std	Y+11, r24	; 0x0b
 992:	9c 87       	std	Y+12, r25	; 0x0c
 994:	ad 87       	std	Y+13, r26	; 0x0d
 996:	be 87       	std	Y+14, r27	; 0x0e
	
	
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int tempGCD = 1;
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	a0 e0       	ldi	r26, 0x00	; 0
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	8f 87       	std	Y+15, r24	; 0x0f
 9a2:	98 8b       	std	Y+16, r25	; 0x10
 9a4:	a9 8b       	std	Y+17, r26	; 0x11
 9a6:	ba 8b       	std	Y+18, r27	; 0x12
	tempGCD = findGCD(Menu_calc, Player1_calc);
 9a8:	2f 81       	ldd	r18, Y+7	; 0x07
 9aa:	38 85       	ldd	r19, Y+8	; 0x08
 9ac:	49 85       	ldd	r20, Y+9	; 0x09
 9ae:	5a 85       	ldd	r21, Y+10	; 0x0a
 9b0:	8b 81       	ldd	r24, Y+3	; 0x03
 9b2:	9c 81       	ldd	r25, Y+4	; 0x04
 9b4:	ad 81       	ldd	r26, Y+5	; 0x05
 9b6:	be 81       	ldd	r27, Y+6	; 0x06
 9b8:	bc 01       	movw	r22, r24
 9ba:	cd 01       	movw	r24, r26
 9bc:	56 dc       	rcall	.-1876   	; 0x26a <findGCD>
 9be:	dc 01       	movw	r26, r24
 9c0:	cb 01       	movw	r24, r22
 9c2:	8f 87       	std	Y+15, r24	; 0x0f
 9c4:	98 8b       	std	Y+16, r25	; 0x10
 9c6:	a9 8b       	std	Y+17, r26	; 0x11
 9c8:	ba 8b       	std	Y+18, r27	; 0x12
	//tempGCD = findGCD(tempGCD, LCD_calc);
	
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tempGCD;
 9ca:	8f 85       	ldd	r24, Y+15	; 0x0f
 9cc:	98 89       	ldd	r25, Y+16	; 0x10
 9ce:	a9 89       	ldd	r26, Y+17	; 0x11
 9d0:	ba 89       	ldd	r27, Y+18	; 0x12
 9d2:	8b 8b       	std	Y+19, r24	; 0x13
 9d4:	9c 8b       	std	Y+20, r25	; 0x14
 9d6:	ad 8b       	std	Y+21, r26	; 0x15
 9d8:	be 8b       	std	Y+22, r27	; 0x16

	//Recalculate GCD periods for scheduler
	unsigned long int Menu_period = Menu_calc/GCD;
 9da:	8b 81       	ldd	r24, Y+3	; 0x03
 9dc:	9c 81       	ldd	r25, Y+4	; 0x04
 9de:	ad 81       	ldd	r26, Y+5	; 0x05
 9e0:	be 81       	ldd	r27, Y+6	; 0x06
 9e2:	2b 89       	ldd	r18, Y+19	; 0x13
 9e4:	3c 89       	ldd	r19, Y+20	; 0x14
 9e6:	4d 89       	ldd	r20, Y+21	; 0x15
 9e8:	5e 89       	ldd	r21, Y+22	; 0x16
 9ea:	bc 01       	movw	r22, r24
 9ec:	cd 01       	movw	r24, r26
 9ee:	2c d1       	rcall	.+600    	; 0xc48 <__udivmodsi4>
 9f0:	da 01       	movw	r26, r20
 9f2:	c9 01       	movw	r24, r18
 9f4:	8f 8b       	std	Y+23, r24	; 0x17
 9f6:	98 8f       	std	Y+24, r25	; 0x18
 9f8:	a9 8f       	std	Y+25, r26	; 0x19
 9fa:	ba 8f       	std	Y+26, r27	; 0x1a
	unsigned long int Player1_period = Player1_calc/GCD;
 9fc:	8f 81       	ldd	r24, Y+7	; 0x07
 9fe:	98 85       	ldd	r25, Y+8	; 0x08
 a00:	a9 85       	ldd	r26, Y+9	; 0x09
 a02:	ba 85       	ldd	r27, Y+10	; 0x0a
 a04:	2b 89       	ldd	r18, Y+19	; 0x13
 a06:	3c 89       	ldd	r19, Y+20	; 0x14
 a08:	4d 89       	ldd	r20, Y+21	; 0x15
 a0a:	5e 89       	ldd	r21, Y+22	; 0x16
 a0c:	bc 01       	movw	r22, r24
 a0e:	cd 01       	movw	r24, r26
 a10:	1b d1       	rcall	.+566    	; 0xc48 <__udivmodsi4>
 a12:	da 01       	movw	r26, r20
 a14:	c9 01       	movw	r24, r18
 a16:	8b 8f       	std	Y+27, r24	; 0x1b
 a18:	9c 8f       	std	Y+28, r25	; 0x1c
 a1a:	ad 8f       	std	Y+29, r26	; 0x1d
 a1c:	be 8f       	std	Y+30, r27	; 0x1e
	unsigned long int LCD_period = LCD_calc/GCD;
 a1e:	8b 85       	ldd	r24, Y+11	; 0x0b
 a20:	9c 85       	ldd	r25, Y+12	; 0x0c
 a22:	ad 85       	ldd	r26, Y+13	; 0x0d
 a24:	be 85       	ldd	r27, Y+14	; 0x0e
 a26:	2b 89       	ldd	r18, Y+19	; 0x13
 a28:	3c 89       	ldd	r19, Y+20	; 0x14
 a2a:	4d 89       	ldd	r20, Y+21	; 0x15
 a2c:	5e 89       	ldd	r21, Y+22	; 0x16
 a2e:	bc 01       	movw	r22, r24
 a30:	cd 01       	movw	r24, r26
 a32:	0a d1       	rcall	.+532    	; 0xc48 <__udivmodsi4>
 a34:	da 01       	movw	r26, r20
 a36:	c9 01       	movw	r24, r18
 a38:	8f 8f       	std	Y+31, r24	; 0x1f
 a3a:	98 a3       	std	Y+32, r25	; 0x20
 a3c:	a9 a3       	std	Y+33, r26	; 0x21
 a3e:	ba a3       	std	Y+34, r27	; 0x22

	
	//Declare an array of tasks
	static task task1, task2/*, task3*/;
	task *tasks[] = { &task1, &task2, /*&task3*/ };
 a40:	84 e7       	ldi	r24, 0x74	; 116
 a42:	91 e0       	ldi	r25, 0x01	; 1
 a44:	9e a3       	std	Y+38, r25	; 0x26
 a46:	8d a3       	std	Y+37, r24	; 0x25
 a48:	8f e7       	ldi	r24, 0x7F	; 127
 a4a:	91 e0       	ldi	r25, 0x01	; 1
 a4c:	98 a7       	std	Y+40, r25	; 0x28
 a4e:	8f a3       	std	Y+39, r24	; 0x27
	const unsigned short numTasks = sizeof(tasks) / sizeof(task*);
 a50:	82 e0       	ldi	r24, 0x02	; 2
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	9c a3       	std	Y+36, r25	; 0x24
 a56:	8b a3       	std	Y+35, r24	; 0x23
	
	//task1
	task1.state = 0;//Task initial state.
 a58:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <task1.2237>
	task1.period = Menu_period;//Task Period.
 a5c:	8f 89       	ldd	r24, Y+23	; 0x17
 a5e:	98 8d       	ldd	r25, Y+24	; 0x18
 a60:	a9 8d       	ldd	r26, Y+25	; 0x19
 a62:	ba 8d       	ldd	r27, Y+26	; 0x1a
 a64:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <task1.2237+0x1>
 a68:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <task1.2237+0x2>
 a6c:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <task1.2237+0x3>
 a70:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <task1.2237+0x4>
	task1.elapsedTime = Menu_period;//Task current elapsed time.
 a74:	8f 89       	ldd	r24, Y+23	; 0x17
 a76:	98 8d       	ldd	r25, Y+24	; 0x18
 a78:	a9 8d       	ldd	r26, Y+25	; 0x19
 a7a:	ba 8d       	ldd	r27, Y+26	; 0x1a
 a7c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <task1.2237+0x5>
 a80:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <task1.2237+0x6>
 a84:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <task1.2237+0x7>
 a88:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <task1.2237+0x8>
	task1.TickFct = &Menu_tick;//Function pointer for the tick.
 a8c:	8a ec       	ldi	r24, 0xCA	; 202
 a8e:	93 e0       	ldi	r25, 0x03	; 3
 a90:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <task1.2237+0xa>
 a94:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <task1.2237+0x9>
	// Task 2
	task2.state = 0;//Task initial state.
 a98:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <task2.2238>
	task2.period = Player1_period;//Task Period.
 a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 aa0:	ad 8d       	ldd	r26, Y+29	; 0x1d
 aa2:	be 8d       	ldd	r27, Y+30	; 0x1e
 aa4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <task2.2238+0x1>
 aa8:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <task2.2238+0x2>
 aac:	a0 93 82 01 	sts	0x0182, r26	; 0x800182 <task2.2238+0x3>
 ab0:	b0 93 83 01 	sts	0x0183, r27	; 0x800183 <task2.2238+0x4>
	task2.elapsedTime = Player1_period;//Task current elapsed time.
 ab4:	8b 8d       	ldd	r24, Y+27	; 0x1b
 ab6:	9c 8d       	ldd	r25, Y+28	; 0x1c
 ab8:	ad 8d       	ldd	r26, Y+29	; 0x1d
 aba:	be 8d       	ldd	r27, Y+30	; 0x1e
 abc:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <task2.2238+0x5>
 ac0:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <task2.2238+0x6>
 ac4:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <task2.2238+0x7>
 ac8:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <task2.2238+0x8>
	task2.TickFct = &Player1_tick;//Function pointer for the tick.
 acc:	87 e5       	ldi	r24, 0x57	; 87
 ace:	94 e0       	ldi	r25, 0x04	; 4
 ad0:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <task2.2238+0xa>
 ad4:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <task2.2238+0x9>
	task2.period = LCD_period;//Task Period.
	task2.elapsedTime = LCD_period;//Task current elapsed time.
	task2.TickFct = &LCD;//Function pointer for the tick.*/
	
	// Set the timer and turn it on
	TimerSet(GCD);
 ad8:	8b 89       	ldd	r24, Y+19	; 0x13
 ada:	9c 89       	ldd	r25, Y+20	; 0x14
 adc:	ad 89       	ldd	r26, Y+21	; 0x15
 ade:	be 89       	ldd	r27, Y+22	; 0x16
 ae0:	bc 01       	movw	r22, r24
	TimerOn();
 ae2:	cd 01       	movw	r24, r26
 ae4:	f1 da       	rcall	.-2590   	; 0xc8 <TimerSet>
	LCD_init();
 ae6:	1e db       	rcall	.-2500   	; 0x124 <TimerOn>
 ae8:	16 dc       	rcall	.-2004   	; 0x316 <LCD_init>
	LCD_ClearScreen();
 aea:	0b dc       	rcall	.-2026   	; 0x302 <LCD_ClearScreen>
 aec:	1a 82       	std	Y+2, r1	; 0x02
	//unsigned char tmp = 0;
	
	while(1) {

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 aee:	19 82       	std	Y+1, r1	; 0x01
 af0:	9b c0       	rjmp	.+310    	; 0xc28 <main+0x322>
 af2:	89 81       	ldd	r24, Y+1	; 0x01
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 af4:	9a 81       	ldd	r25, Y+2	; 0x02
 af6:	88 0f       	add	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	9e 01       	movw	r18, r28
 afc:	2f 5f       	subi	r18, 0xFF	; 255
 afe:	3f 4f       	sbci	r19, 0xFF	; 255
 b00:	82 0f       	add	r24, r18
 b02:	93 1f       	adc	r25, r19
 b04:	84 96       	adiw	r24, 0x24	; 36
 b06:	fc 01       	movw	r30, r24
 b08:	80 81       	ld	r24, Z
 b0a:	91 81       	ldd	r25, Z+1	; 0x01
 b0c:	fc 01       	movw	r30, r24
 b0e:	25 81       	ldd	r18, Z+5	; 0x05
 b10:	36 81       	ldd	r19, Z+6	; 0x06
 b12:	47 81       	ldd	r20, Z+7	; 0x07
 b14:	50 85       	ldd	r21, Z+8	; 0x08
 b16:	89 81       	ldd	r24, Y+1	; 0x01
 b18:	9a 81       	ldd	r25, Y+2	; 0x02
 b1a:	88 0f       	add	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	be 01       	movw	r22, r28
 b20:	6f 5f       	subi	r22, 0xFF	; 255
 b22:	7f 4f       	sbci	r23, 0xFF	; 255
 b24:	86 0f       	add	r24, r22
 b26:	97 1f       	adc	r25, r23
 b28:	84 96       	adiw	r24, 0x24	; 36
 b2a:	fc 01       	movw	r30, r24
 b2c:	80 81       	ld	r24, Z
 b2e:	91 81       	ldd	r25, Z+1	; 0x01
 b30:	fc 01       	movw	r30, r24
 b32:	81 81       	ldd	r24, Z+1	; 0x01
 b34:	92 81       	ldd	r25, Z+2	; 0x02
 b36:	a3 81       	ldd	r26, Z+3	; 0x03
 b38:	b4 81       	ldd	r27, Z+4	; 0x04
 b3a:	28 17       	cp	r18, r24
 b3c:	39 07       	cpc	r19, r25
 b3e:	4a 07       	cpc	r20, r26
 b40:	5b 07       	cpc	r21, r27
 b42:	09 f0       	breq	.+2      	; 0xb46 <main+0x240>
 b44:	45 c0       	rjmp	.+138    	; 0xbd0 <main+0x2ca>
 b46:	89 81       	ldd	r24, Y+1	; 0x01
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 b48:	9a 81       	ldd	r25, Y+2	; 0x02
 b4a:	88 0f       	add	r24, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	9e 01       	movw	r18, r28
 b50:	2f 5f       	subi	r18, 0xFF	; 255
 b52:	3f 4f       	sbci	r19, 0xFF	; 255
 b54:	82 0f       	add	r24, r18
 b56:	93 1f       	adc	r25, r19
 b58:	84 96       	adiw	r24, 0x24	; 36
 b5a:	fc 01       	movw	r30, r24
 b5c:	00 81       	ld	r16, Z
 b5e:	11 81       	ldd	r17, Z+1	; 0x01
 b60:	89 81       	ldd	r24, Y+1	; 0x01
 b62:	9a 81       	ldd	r25, Y+2	; 0x02
 b64:	88 0f       	add	r24, r24
 b66:	99 1f       	adc	r25, r25
 b68:	9e 01       	movw	r18, r28
 b6a:	2f 5f       	subi	r18, 0xFF	; 255
 b6c:	3f 4f       	sbci	r19, 0xFF	; 255
 b6e:	82 0f       	add	r24, r18
 b70:	93 1f       	adc	r25, r19
 b72:	84 96       	adiw	r24, 0x24	; 36
 b74:	fc 01       	movw	r30, r24
 b76:	80 81       	ld	r24, Z
 b78:	91 81       	ldd	r25, Z+1	; 0x01
 b7a:	fc 01       	movw	r30, r24
 b7c:	21 85       	ldd	r18, Z+9	; 0x09
 b7e:	32 85       	ldd	r19, Z+10	; 0x0a
 b80:	89 81       	ldd	r24, Y+1	; 0x01
 b82:	9a 81       	ldd	r25, Y+2	; 0x02
 b84:	88 0f       	add	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	ae 01       	movw	r20, r28
 b8a:	4f 5f       	subi	r20, 0xFF	; 255
 b8c:	5f 4f       	sbci	r21, 0xFF	; 255
 b8e:	84 0f       	add	r24, r20
 b90:	95 1f       	adc	r25, r21
 b92:	84 96       	adiw	r24, 0x24	; 36
 b94:	fc 01       	movw	r30, r24
 b96:	80 81       	ld	r24, Z
 b98:	91 81       	ldd	r25, Z+1	; 0x01
 b9a:	fc 01       	movw	r30, r24
 b9c:	80 81       	ld	r24, Z
 b9e:	08 2e       	mov	r0, r24
 ba0:	00 0c       	add	r0, r0
 ba2:	99 0b       	sbc	r25, r25
 ba4:	f9 01       	movw	r30, r18
 ba6:	09 95       	icall
 ba8:	f8 01       	movw	r30, r16
 baa:	80 83       	st	Z, r24
 bac:	89 81       	ldd	r24, Y+1	; 0x01
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 bae:	9a 81       	ldd	r25, Y+2	; 0x02
 bb0:	88 0f       	add	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	9e 01       	movw	r18, r28
 bb6:	2f 5f       	subi	r18, 0xFF	; 255
 bb8:	3f 4f       	sbci	r19, 0xFF	; 255
 bba:	82 0f       	add	r24, r18
 bbc:	93 1f       	adc	r25, r19
 bbe:	84 96       	adiw	r24, 0x24	; 36
 bc0:	fc 01       	movw	r30, r24
 bc2:	80 81       	ld	r24, Z
 bc4:	91 81       	ldd	r25, Z+1	; 0x01
 bc6:	fc 01       	movw	r30, r24
 bc8:	15 82       	std	Z+5, r1	; 0x05
 bca:	16 82       	std	Z+6, r1	; 0x06
 bcc:	17 82       	std	Z+7, r1	; 0x07
 bce:	10 86       	std	Z+8, r1	; 0x08
 bd0:	89 81       	ldd	r24, Y+1	; 0x01
			}
			tasks[i]->elapsedTime += 1;
 bd2:	9a 81       	ldd	r25, Y+2	; 0x02
 bd4:	88 0f       	add	r24, r24
 bd6:	99 1f       	adc	r25, r25
 bd8:	9e 01       	movw	r18, r28
 bda:	2f 5f       	subi	r18, 0xFF	; 255
 bdc:	3f 4f       	sbci	r19, 0xFF	; 255
 bde:	82 0f       	add	r24, r18
 be0:	93 1f       	adc	r25, r19
 be2:	84 96       	adiw	r24, 0x24	; 36
 be4:	fc 01       	movw	r30, r24
 be6:	20 81       	ld	r18, Z
 be8:	31 81       	ldd	r19, Z+1	; 0x01
 bea:	89 81       	ldd	r24, Y+1	; 0x01
 bec:	9a 81       	ldd	r25, Y+2	; 0x02
 bee:	88 0f       	add	r24, r24
 bf0:	99 1f       	adc	r25, r25
 bf2:	ae 01       	movw	r20, r28
 bf4:	4f 5f       	subi	r20, 0xFF	; 255
 bf6:	5f 4f       	sbci	r21, 0xFF	; 255
 bf8:	84 0f       	add	r24, r20
 bfa:	95 1f       	adc	r25, r21
 bfc:	84 96       	adiw	r24, 0x24	; 36
 bfe:	fc 01       	movw	r30, r24
 c00:	80 81       	ld	r24, Z
 c02:	91 81       	ldd	r25, Z+1	; 0x01
 c04:	fc 01       	movw	r30, r24
 c06:	85 81       	ldd	r24, Z+5	; 0x05
 c08:	96 81       	ldd	r25, Z+6	; 0x06
 c0a:	a7 81       	ldd	r26, Z+7	; 0x07
 c0c:	b0 85       	ldd	r27, Z+8	; 0x08
 c0e:	01 96       	adiw	r24, 0x01	; 1
 c10:	a1 1d       	adc	r26, r1
 c12:	b1 1d       	adc	r27, r1
 c14:	f9 01       	movw	r30, r18
 c16:	85 83       	std	Z+5, r24	; 0x05
 c18:	96 83       	std	Z+6, r25	; 0x06
 c1a:	a7 83       	std	Z+7, r26	; 0x07
 c1c:	b0 87       	std	Z+8, r27	; 0x08
 c1e:	89 81       	ldd	r24, Y+1	; 0x01
	//unsigned char tmp = 0;
	
	while(1) {

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 c20:	9a 81       	ldd	r25, Y+2	; 0x02
 c22:	01 96       	adiw	r24, 0x01	; 1
 c24:	9a 83       	std	Y+2, r25	; 0x02
 c26:	89 83       	std	Y+1, r24	; 0x01
 c28:	29 81       	ldd	r18, Y+1	; 0x01
 c2a:	3a 81       	ldd	r19, Y+2	; 0x02
 c2c:	8b a1       	ldd	r24, Y+35	; 0x23
 c2e:	9c a1       	ldd	r25, Y+36	; 0x24
 c30:	28 17       	cp	r18, r24
 c32:	39 07       	cpc	r19, r25
 c34:	08 f4       	brcc	.+2      	; 0xc38 <main+0x332>
 c36:	5d cf       	rjmp	.-326    	; 0xaf2 <main+0x1ec>
 c38:	00 00       	nop
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 c3a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
 c3e:	88 23       	and	r24, r24
 c40:	e1 f3       	breq	.-8      	; 0xc3a <main+0x334>
 c42:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
		TimerFlag = 0;
 c46:	52 cf       	rjmp	.-348    	; 0xaec <main+0x1e6>

00000c48 <__udivmodsi4>:

	} //end while
 c48:	a1 e2       	ldi	r26, 0x21	; 33
 c4a:	1a 2e       	mov	r1, r26
 c4c:	aa 1b       	sub	r26, r26
 c4e:	bb 1b       	sub	r27, r27
 c50:	fd 01       	movw	r30, r26
 c52:	0d c0       	rjmp	.+26     	; 0xc6e <__udivmodsi4_ep>

00000c54 <__udivmodsi4_loop>:
 c54:	aa 1f       	adc	r26, r26
 c56:	bb 1f       	adc	r27, r27
 c58:	ee 1f       	adc	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	a2 17       	cp	r26, r18
 c5e:	b3 07       	cpc	r27, r19
 c60:	e4 07       	cpc	r30, r20
 c62:	f5 07       	cpc	r31, r21
 c64:	20 f0       	brcs	.+8      	; 0xc6e <__udivmodsi4_ep>
 c66:	a2 1b       	sub	r26, r18
 c68:	b3 0b       	sbc	r27, r19
 c6a:	e4 0b       	sbc	r30, r20
 c6c:	f5 0b       	sbc	r31, r21

00000c6e <__udivmodsi4_ep>:
 c6e:	66 1f       	adc	r22, r22
 c70:	77 1f       	adc	r23, r23
 c72:	88 1f       	adc	r24, r24
 c74:	99 1f       	adc	r25, r25
 c76:	1a 94       	dec	r1
 c78:	69 f7       	brne	.-38     	; 0xc54 <__udivmodsi4_loop>
 c7a:	60 95       	com	r22
 c7c:	70 95       	com	r23
 c7e:	80 95       	com	r24
 c80:	90 95       	com	r25
 c82:	9b 01       	movw	r18, r22
 c84:	ac 01       	movw	r20, r24
 c86:	bd 01       	movw	r22, r26
 c88:	cf 01       	movw	r24, r30
 c8a:	08 95       	ret

00000c8c <_exit>:
 c8c:	f8 94       	cli

00000c8e <__stop_program>:
 c8e:	ff cf       	rjmp	.-2      	; 0xc8e <__stop_program>
