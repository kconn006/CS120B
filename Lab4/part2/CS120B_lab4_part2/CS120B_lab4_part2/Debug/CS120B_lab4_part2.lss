
CS120B_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000406  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b1  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000486  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
  66:	00 00       	nop
  68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
  6e:	00 00       	nop
  70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
  72:	00 00       	nop
  74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
  7e:	00 00       	nop
  80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
  82:	00 00       	nop
  84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
  86:	00 00       	nop
  88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8e 00       	.word	0x008e	; ????
  8e:	95 00       	.word	0x0095	; ????
  90:	d4 00       	.word	0x00d4	; ????
  92:	ea 00       	.word	0x00ea	; ????
  94:	00 01       	movw	r0, r0
  96:	3f 01       	movw	r6, r30
  98:	74 01       	movw	r14, r8

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a5 30       	cpi	r26, 0x05	; 5
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	75 d1       	rcall	.+746    	; 0x3a2 <main>
  b8:	a4 c1       	rjmp	.+840    	; 0x402 <_exit>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <Tick>:

unsigned char button_0 = 0x00;
unsigned char button_1 = 0x00;
unsigned char tmpC;

void Tick() {
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	
	button_0 = ~PINA & 0x01; //inc
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	88 2f       	mov	r24, r24
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	81 70       	andi	r24, 0x01	; 1
  d2:	99 27       	eor	r25, r25
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	89 2b       	or	r24, r25
  d8:	09 f0       	breq	.+2      	; 0xdc <Tick+0x20>
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	82 2f       	mov	r24, r18
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	button_1 = ~PINA & 0x02; //dec
  e2:	80 e2       	ldi	r24, 0x20	; 32
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	80 81       	ld	r24, Z
  ea:	80 95       	com	r24
  ec:	82 70       	andi	r24, 0x02	; 2
  ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <button_1>
	
	switch(state) { //transitions
  f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
  fa:	cc 01       	movw	r24, r24
  fc:	a0 e0       	ldi	r26, 0x00	; 0
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	26 e0       	ldi	r18, 0x06	; 6
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	84 1b       	sub	r24, r20
 10a:	95 0b       	sbc	r25, r21
 10c:	28 17       	cp	r18, r24
 10e:	39 07       	cpc	r19, r25
 110:	08 f4       	brcc	.+2      	; 0x114 <Tick+0x58>
 112:	0f c1       	rjmp	.+542    	; 0x332 <Tick+0x276>
 114:	8a 5b       	subi	r24, 0xBA	; 186
 116:	9f 4f       	sbci	r25, 0xFF	; 255
 118:	fc 01       	movw	r30, r24
 11a:	6a c1       	rjmp	.+724    	; 0x3f0 <__tablejump2__>

		case START: 
			state = INIT;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 128:	09 c1       	rjmp	.+530    	; 0x33c <Tick+0x280>
		
		case INIT:
			
			if(button_0 && !button_1) { //button 1 pressed
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12e:	88 23       	and	r24, r24
 130:	59 f0       	breq	.+22     	; 0x148 <Tick+0x8c>
 132:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 136:	88 23       	and	r24, r24
 138:	39 f4       	brne	.+14     	; 0x148 <Tick+0x8c>
				state = INC;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 146:	2f c0       	rjmp	.+94     	; 0x1a6 <Tick+0xea>
			}
			
			else if(!button_0 && button_1) { //button 2 pressed
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14c:	88 23       	and	r24, r24
 14e:	59 f4       	brne	.+22     	; 0x166 <Tick+0xaa>
 150:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 154:	88 23       	and	r24, r24
 156:	39 f0       	breq	.+14     	; 0x166 <Tick+0xaa>
				state = DEC;
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 164:	20 c0       	rjmp	.+64     	; 0x1a6 <Tick+0xea>
			}
			
			else if(button_0 && button_1) { //both pressed
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16a:	88 23       	and	r24, r24
 16c:	59 f0       	breq	.+22     	; 0x184 <Tick+0xc8>
 16e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 172:	88 23       	and	r24, r24
 174:	39 f0       	breq	.+14     	; 0x184 <Tick+0xc8>
				state = RESET;
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 17e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 182:	11 c0       	rjmp	.+34     	; 0x1a6 <Tick+0xea>
			}
			else if(!button_0 && !button_1){ //stay
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 188:	88 23       	and	r24, r24
 18a:	09 f0       	breq	.+2      	; 0x18e <Tick+0xd2>
 18c:	d4 c0       	rjmp	.+424    	; 0x336 <Tick+0x27a>
 18e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 192:	88 23       	and	r24, r24
 194:	09 f0       	breq	.+2      	; 0x198 <Tick+0xdc>
 196:	cf c0       	rjmp	.+414    	; 0x336 <Tick+0x27a>
				state = INIT;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 1a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
		break;
 1a4:	c8 c0       	rjmp	.+400    	; 0x336 <Tick+0x27a>
 1a6:	c7 c0       	rjmp	.+398    	; 0x336 <Tick+0x27a>
		
		
		case INC:
			
			if(button_0 && button_1) { //both pressed
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ac:	88 23       	and	r24, r24
 1ae:	59 f0       	breq	.+22     	; 0x1c6 <Tick+0x10a>
 1b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 1b4:	88 23       	and	r24, r24
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <Tick+0x10a>
				state = RESET;
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 1c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			
			else {
				state = RELEASE;
			}
			
		break;
 1c4:	bb c0       	rjmp	.+374    	; 0x33c <Tick+0x280>
			if(button_0 && button_1) { //both pressed
				state = RESET;
			}
			
			else {
				state = RELEASE;
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 1ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			
		break;
 1d2:	b4 c0       	rjmp	.+360    	; 0x33c <Tick+0x280>
			
		case DEC:
			
			if(button_0 && button_1) { //both pressed
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d8:	88 23       	and	r24, r24
 1da:	59 f0       	breq	.+22     	; 0x1f2 <Tick+0x136>
 1dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 1e0:	88 23       	and	r24, r24
 1e2:	39 f0       	breq	.+14     	; 0x1f2 <Tick+0x136>
				state = RESET;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 1ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			
			else {
				state = RELEASE;
			}
			
		break;
 1f0:	a5 c0       	rjmp	.+330    	; 0x33c <Tick+0x280>
			if(button_0 && button_1) { //both pressed
				state = RESET;
			}
			
			else {
				state = RELEASE;
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 1fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			}
			
		break;
 1fe:	9e c0       	rjmp	.+316    	; 0x33c <Tick+0x280>
			
			case RESET:
				if(button_0 && button_1) { //both pressed, stay
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 204:	88 23       	and	r24, r24
 206:	59 f0       	breq	.+22     	; 0x21e <Tick+0x162>
 208:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 20c:	88 23       	and	r24, r24
 20e:	39 f0       	breq	.+14     	; 0x21e <Tick+0x162>
					state = RESET;
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 218:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 21c:	2f c0       	rjmp	.+94     	; 0x27c <Tick+0x1c0>
				}
					
				else if(!button_0 && !button_1) { //neither
 21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 222:	88 23       	and	r24, r24
 224:	59 f4       	brne	.+22     	; 0x23c <Tick+0x180>
 226:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 22a:	88 23       	and	r24, r24
 22c:	39 f4       	brne	.+14     	; 0x23c <Tick+0x180>
					state = INIT;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 236:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 23a:	20 c0       	rjmp	.+64     	; 0x27c <Tick+0x1c0>
				}
					
				else if(!button_0 && button_1) { //dec
 23c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 240:	88 23       	and	r24, r24
 242:	59 f4       	brne	.+22     	; 0x25a <Tick+0x19e>
 244:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 248:	88 23       	and	r24, r24
 24a:	39 f0       	breq	.+14     	; 0x25a <Tick+0x19e>
					state = DEC;
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 254:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 258:	11 c0       	rjmp	.+34     	; 0x27c <Tick+0x1c0>
				}
				
				else if(button_0 && !button_1) { //inc
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 25e:	88 23       	and	r24, r24
 260:	09 f4       	brne	.+2      	; 0x264 <Tick+0x1a8>
 262:	6b c0       	rjmp	.+214    	; 0x33a <Tick+0x27e>
 264:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 268:	88 23       	and	r24, r24
 26a:	09 f0       	breq	.+2      	; 0x26e <Tick+0x1b2>
 26c:	66 c0       	rjmp	.+204    	; 0x33a <Tick+0x27e>
					state = INC;
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 276:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
				}
			break;
 27a:	5f c0       	rjmp	.+190    	; 0x33a <Tick+0x27e>
 27c:	5e c0       	rjmp	.+188    	; 0x33a <Tick+0x27e>
			
			case PRESS:
				if(button_0 && button_1) { //both pressed, stay
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 282:	88 23       	and	r24, r24
 284:	59 f0       	breq	.+22     	; 0x29c <Tick+0x1e0>
 286:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 28a:	88 23       	and	r24, r24
 28c:	39 f0       	breq	.+14     	; 0x29c <Tick+0x1e0>
					state = RESET;
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 296:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 29a:	25 c0       	rjmp	.+74     	; 0x2e6 <Tick+0x22a>
				}
					
				else if(!button_0 && button_1) { //dec
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2a0:	88 23       	and	r24, r24
 2a2:	59 f4       	brne	.+22     	; 0x2ba <Tick+0x1fe>
 2a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 2a8:	88 23       	and	r24, r24
 2aa:	39 f0       	breq	.+14     	; 0x2ba <Tick+0x1fe>
					state = DEC;
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 2b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 2b8:	16 c0       	rjmp	.+44     	; 0x2e6 <Tick+0x22a>
				}
				
				else if(button_0 && !button_1) { //inc
 2ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2be:	88 23       	and	r24, r24
 2c0:	59 f0       	breq	.+22     	; 0x2d8 <Tick+0x21c>
 2c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 2c6:	88 23       	and	r24, r24
 2c8:	39 f4       	brne	.+14     	; 0x2d8 <Tick+0x21c>
					state = INC;
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 2d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <Tick+0x22a>
				}
				else {
					state = PRESS;
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 2e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
				}
			break;
 2e4:	2b c0       	rjmp	.+86     	; 0x33c <Tick+0x280>
 2e6:	2a c0       	rjmp	.+84     	; 0x33c <Tick+0x280>
			
			case RELEASE:
				if(!button_0 && !button_1) { //released
 2e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ec:	88 23       	and	r24, r24
 2ee:	59 f4       	brne	.+22     	; 0x306 <Tick+0x24a>
 2f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 2f4:	88 23       	and	r24, r24
 2f6:	39 f4       	brne	.+14     	; 0x306 <Tick+0x24a>
					state = PRESS;
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 300:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 304:	16 c0       	rjmp	.+44     	; 0x332 <Tick+0x276>
				}
					
				else if(button_0 && button_1) { //reset
 306:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 30a:	88 23       	and	r24, r24
 30c:	59 f0       	breq	.+22     	; 0x324 <Tick+0x268>
 30e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <button_1>
 312:	88 23       	and	r24, r24
 314:	39 f0       	breq	.+14     	; 0x324 <Tick+0x268>
					state = RESET;
 316:	84 e0       	ldi	r24, 0x04	; 4
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 31e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 322:	07 c0       	rjmp	.+14     	; 0x332 <Tick+0x276>
				}
				
				else {
					state = RELEASE;
 324:	86 e0       	ldi	r24, 0x06	; 6
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 32c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
				}
			
			default:
				break;
 330:	00 c0       	rjmp	.+0      	; 0x332 <Tick+0x276>
 332:	00 00       	nop
 334:	03 c0       	rjmp	.+6      	; 0x33c <Tick+0x280>
				state = RESET;
			}
			else if(!button_0 && !button_1){ //stay
				state = INIT;
			}
		break;
 336:	00 00       	nop
 338:	01 c0       	rjmp	.+2      	; 0x33c <Tick+0x280>
				}
				
				else if(button_0 && !button_1) { //inc
					state = INC;
				}
			break;
 33a:	00 00       	nop
			
			
	} //end transitions
	
	
	switch(state) { //actions
 33c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 340:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	91 05       	cpc	r25, r1
 348:	61 f0       	breq	.+24     	; 0x362 <Tick+0x2a6>
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	91 05       	cpc	r25, r1
 34e:	18 f4       	brcc	.+6      	; 0x356 <Tick+0x29a>
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f0       	breq	.+60     	; 0x390 <Tick+0x2d4>
		case RESET:
			tmpC = 0x00;
			break;
		
		default:
			break;
 354:	22 c0       	rjmp	.+68     	; 0x39a <Tick+0x2de>
			
			
	} //end transitions
	
	
	switch(state) { //actions
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	91 05       	cpc	r25, r1
 35a:	69 f0       	breq	.+26     	; 0x376 <Tick+0x2ba>
 35c:	04 97       	sbiw	r24, 0x04	; 4
 35e:	a9 f0       	breq	.+42     	; 0x38a <Tick+0x2ce>
		case RESET:
			tmpC = 0x00;
			break;
		
		default:
			break;
 360:	1c c0       	rjmp	.+56     	; 0x39a <Tick+0x2de>
			
		case INIT:
			break;
			
		case INC:
			if(tmpC < 9) {
 362:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tmpC>
 366:	89 30       	cpi	r24, 0x09	; 9
 368:	a8 f4       	brcc	.+42     	; 0x394 <Tick+0x2d8>
				tmpC += 1;
 36a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tmpC>
 36e:	8f 5f       	subi	r24, 0xFF	; 255
 370:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tmpC>

			}
			break;
 374:	0f c0       	rjmp	.+30     	; 0x394 <Tick+0x2d8>
		
		case DEC:
			if(tmpC > 0) {
 376:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tmpC>
 37a:	88 23       	and	r24, r24
 37c:	69 f0       	breq	.+26     	; 0x398 <Tick+0x2dc>
				tmpC -= 1;
 37e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tmpC>
 382:	81 50       	subi	r24, 0x01	; 1
 384:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tmpC>
			}
			break;
 388:	07 c0       	rjmp	.+14     	; 0x398 <Tick+0x2dc>
			
		case RESET:
			tmpC = 0x00;
 38a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tmpC>
			break;
 38e:	05 c0       	rjmp	.+10     	; 0x39a <Tick+0x2de>
	
	
	switch(state) { //actions
			
		case INIT:
			break;
 390:	00 00       	nop
 392:	03 c0       	rjmp	.+6      	; 0x39a <Tick+0x2de>
		case INC:
			if(tmpC < 9) {
				tmpC += 1;

			}
			break;
 394:	00 00       	nop
 396:	01 c0       	rjmp	.+2      	; 0x39a <Tick+0x2de>
		
		case DEC:
			if(tmpC > 0) {
				tmpC -= 1;
			}
			break;
 398:	00 00       	nop
			break;
		
		default:
			break;
	}
}
 39a:	00 00       	nop
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <main>:

int main(void) {
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
 3aa:	81 e2       	ldi	r24, 0x21	; 33
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	fc 01       	movw	r30, r24
 3b0:	10 82       	st	Z, r1
 3b2:	82 e2       	ldi	r24, 0x22	; 34
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00; // Configure port B's 8 pins as outputs
 3bc:	87 e2       	ldi	r24, 0x27	; 39
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	2f ef       	ldi	r18, 0xFF	; 255
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18
 3c6:	88 e2       	ldi	r24, 0x28	; 40
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	fc 01       	movw	r30, r24
 3cc:	10 82       	st	Z, r1
	
	state = INIT;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 3d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
	tmpC = 0x07;
 3da:	87 e0       	ldi	r24, 0x07	; 7
 3dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tmpC>

	while(1) {
		Tick();
 3e0:	6d de       	rcall	.-806    	; 0xbc <Tick>
		PORTC = tmpC;
 3e2:	88 e2       	ldi	r24, 0x28	; 40
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tmpC>
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
	}
 3ee:	f8 cf       	rjmp	.-16     	; 0x3e0 <main+0x3e>

000003f0 <__tablejump2__>:
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	00 24       	eor	r0, r0
 3f6:	00 1c       	adc	r0, r0
 3f8:	0b be       	out	0x3b, r0	; 59
 3fa:	07 90       	elpm	r0, Z+
 3fc:	f6 91       	elpm	r31, Z
 3fe:	e0 2d       	mov	r30, r0
 400:	09 94       	ijmp

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
